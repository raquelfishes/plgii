/* Generated By:JJTree&JavaCC: Do not edit this line. CompiladorConstants.java */
package javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DIGITO = 9;
  /** RegularExpression Id. */
  int LETRA = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int CASE = 14;
  /** RegularExpression Id. */
  int CATCH = 15;
  /** RegularExpression Id. */
  int CHAR = 16;
  /** RegularExpression Id. */
  int CLASS = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int CONTINUE = 19;
  /** RegularExpression Id. */
  int DEFAULT_PLG = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DOUBLE = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int EXTENDS = 24;
  /** RegularExpression Id. */
  int FINAL = 25;
  /** RegularExpression Id. */
  int FINALLY = 26;
  /** RegularExpression Id. */
  int FLOAT = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int GOTO = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int IMPLEMENTS = 31;
  /** RegularExpression Id. */
  int IMPORT = 32;
  /** RegularExpression Id. */
  int INSTANCEOF = 33;
  /** RegularExpression Id. */
  int INT = 34;
  /** RegularExpression Id. */
  int INTERFACE = 35;
  /** RegularExpression Id. */
  int LONG = 36;
  /** RegularExpression Id. */
  int NEW = 37;
  /** RegularExpression Id. */
  int PACKAGE = 38;
  /** RegularExpression Id. */
  int PRIVATE = 39;
  /** RegularExpression Id. */
  int PROTECTED = 40;
  /** RegularExpression Id. */
  int PUBLIC = 41;
  /** RegularExpression Id. */
  int RETURN = 42;
  /** RegularExpression Id. */
  int SHORT = 43;
  /** RegularExpression Id. */
  int STATIC = 44;
  /** RegularExpression Id. */
  int SUPER = 45;
  /** RegularExpression Id. */
  int SWITCH = 46;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 47;
  /** RegularExpression Id. */
  int THIS = 48;
  /** RegularExpression Id. */
  int THROW = 49;
  /** RegularExpression Id. */
  int THROWS = 50;
  /** RegularExpression Id. */
  int TRY = 51;
  /** RegularExpression Id. */
  int VOID = 52;
  /** RegularExpression Id. */
  int VOLATILE = 53;
  /** RegularExpression Id. */
  int WHILE = 54;
  /** RegularExpression Id. */
  int LITERAL_INTEGER = 55;
  /** RegularExpression Id. */
  int LITERAL_FLOAT = 56;
  /** RegularExpression Id. */
  int LITERAL_CARACTER = 57;
  /** RegularExpression Id. */
  int LITERAL_STRING = 58;
  /** RegularExpression Id. */
  int LITERAL_BOOLEAN = 59;
  /** RegularExpression Id. */
  int LITERAL_NULL = 60;
  /** RegularExpression Id. */
  int PAR_A = 61;
  /** RegularExpression Id. */
  int PAR_C = 62;
  /** RegularExpression Id. */
  int LLAVE_A = 63;
  /** RegularExpression Id. */
  int LLAVE_C = 64;
  /** RegularExpression Id. */
  int COR_A = 65;
  /** RegularExpression Id. */
  int COR_C = 66;
  /** RegularExpression Id. */
  int PYC = 67;
  /** RegularExpression Id. */
  int COMA = 68;
  /** RegularExpression Id. */
  int PUNTO = 69;
  /** RegularExpression Id. */
  int PYP = 70;
  /** RegularExpression Id. */
  int PREG = 71;
  /** RegularExpression Id. */
  int OR = 72;
  /** RegularExpression Id. */
  int AND = 73;
  /** RegularExpression Id. */
  int OR_B = 74;
  /** RegularExpression Id. */
  int AND_B = 75;
  /** RegularExpression Id. */
  int IGUAL_IGUAL = 76;
  /** RegularExpression Id. */
  int N_IGUAL = 77;
  /** RegularExpression Id. */
  int MENOR = 78;
  /** RegularExpression Id. */
  int MAYOR = 79;
  /** RegularExpression Id. */
  int MENOR_EQ = 80;
  /** RegularExpression Id. */
  int MAYOR_EQ = 81;
  /** RegularExpression Id. */
  int ADD = 82;
  /** RegularExpression Id. */
  int SUB = 83;
  /** RegularExpression Id. */
  int MULT = 84;
  /** RegularExpression Id. */
  int DIV = 85;
  /** RegularExpression Id. */
  int MOD = 86;
  /** RegularExpression Id. */
  int PLUS_PLUS = 87;
  /** RegularExpression Id. */
  int SUB_SUB = 88;
  /** RegularExpression Id. */
  int NOT = 89;
  /** RegularExpression Id. */
  int ADD_E = 90;
  /** RegularExpression Id. */
  int SUB_E = 91;
  /** RegularExpression Id. */
  int MULT_E = 92;
  /** RegularExpression Id. */
  int DIV_E = 93;
  /** RegularExpression Id. */
  int MOD_E = 94;
  /** RegularExpression Id. */
  int AND_E = 95;
  /** RegularExpression Id. */
  int OR_E = 96;
  /** RegularExpression Id. */
  int EQUALS = 97;
  /** RegularExpression Id. */
  int DESP_D = 98;
  /** RegularExpression Id. */
  int DESP_I = 99;
  /** RegularExpression Id. */
  int DESP_DNS = 100;
  /** RegularExpression Id. */
  int XOR = 101;
  /** RegularExpression Id. */
  int COMP = 102;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int EntreComentarios = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<DIGITO>",
    "<LETRA>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"new\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<LITERAL_INTEGER>",
    "<LITERAL_FLOAT>",
    "<LITERAL_CARACTER>",
    "<LITERAL_STRING>",
    "<LITERAL_BOOLEAN>",
    "\"null\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"!\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"=\"",
    "\">>\"",
    "\"<<\"",
    "\">>>\"",
    "\"^\"",
    "\"~\"",
    "<IDENTIFICADOR>",
  };

}
