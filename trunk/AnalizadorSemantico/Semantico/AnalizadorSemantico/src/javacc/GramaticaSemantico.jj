/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GramaticaSemantico.jj */
/*@egen*/
options {
  LOOKAHEAD = 1;
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = false;
             
                       
                    
                     
  
}

PARSER_BEGIN(Compilador)
package javacc;

import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;

import tabla.simbolos.v2.CGestorTS;
import tabla.simbolos.v2.Atributos;
import interfaz.InterfazPlg;
import javacc.Simbolo;
import traductor.Traductor;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();

/*@egen*/
  public static CGestorTS gestorTS;
  public static boolean usaInterfaz = false;
  public static java.io.DataOutputStream fichero;

  public static CGestorTS gestorTSIntermedia;

  public static Traductor traductor;
  
  public static void main ( String args [] ) {

      //Inicializaci\u00f3n del analizador
      Compilador compilador;
      usaInterfaz = false;
      initGestorTS();
    	
      if(args.length == 0){

        System.out.println ("Compilador: Leyendo de fichero ");
        try {
          compilador = new Compilador(new java.io.FileInputStream("ProgramaPrueba.java"));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero no ha sido encontrado.");
          return;
        }
      }
      else if(args.length == 1){
        System.out.println ("Compilador: Leyendo de fichero " + args[0] + " ..." );
        try {
          compilador = new Compilador(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("Compilador:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
	  try {
        fichero = new java.io.DataOutputStream( new java.io.FileOutputStream("ejemplos/ProgramaIntermedio.txt"));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println ("MAL, NO HAS CREADO EL FICHERO");
        return;
      }
      try {
        SimpleNode root = Compilador.compilar();
		Atributos.resetAliasCounter();
        root.dump("");
        System.out.println ("Compilador: La entrada ha sido leida con \u00e9xito.");
        jjtree.rootNode().interpret();

        //Codigo final
        traductor = new Traductor(gestorTS);
        traductor.traduce("ejemplos/ProgramaIntermedio.txt", "ejemplos/ProgramaFinal.txt");
        System.out.println("Traducido.");
        
      }
      catch(ParseException e){
        System.out.println ("Compilador: Ha ocurrido un error durante el an\u00e1lisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Compilador: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }

  public static void escribeFichero(String s)
    {
      try {
        fichero.writeUTF(s);
      }
      catch(IOException e) {
        System.out.println("No se ha escrito el fichero de c\u00f3digo intermedio." + e.getMessage());
      }
    }

	public static void initGestorTS(){
		//Inicializaci\u00f3n Tabla de S\u00edmbolos y Gestor de \u00c1mbitos
	   gestorTS = new CGestorTS();
	   gestorTSIntermedia = new CGestorTS(); 
	}

	public Node rootNode() {
    return jjtree.rootNode();
  }

  public static int actualTmp=0, actualCase=0, actualIf=0, actualBucle=0, actualEtiq = 0;
  public static String nuevaTemp(){
    return "tmp"+(actualTmp++);
  }
  public static String nuevoCase(){
      return "case"+(++actualCase);
  }
  public static String nuevoIf(){
    return "if"+(actualIf);
  }
  public static String elseIf(){
    return "else-if"+(actualIf);
  }
  public static String finIf(){
    return "fin-if"+(actualIf++);
  }
  public static String nuevoBucle(){
    return "bucle"+(actualBucle);
  }
  public static String finBucle(){
    return "fin-bucle"+(actualBucle++);
  }
  public static String nuevaEtiq(){
    return "etiq"+(actualEtiq++);
  }
}


PARSER_END(Compilador)


/**	Elementos ignorados por el analizador
**	-Espacios en blanco
**	-Caracteres de escape
**	-Comentarios de una linea y comentarios multilinea
*/
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <  "//" (~ ["\n", "\r"])*  >
|  "/*":EntreComentarios 
}

<EntreComentarios> SKIP: 
{  
"*/" : DEFAULT 
} 
<EntreComentarios> MORE: 
{ 
   <~ [ ] > 
}


/** Elementos terminales:
**	-Letras
**	-Digitos
*/
TOKEN :
{
  < #DIGITO : [ "0"-"9" ] >
}

TOKEN :
{ 
  < #LETRA : [ "a" - "z", "A" - "Z" ] >
}


/** Tokens reconocidos por el analizador l\u00e9xico(El orden importa)
**	-Identificador
**	-Palabra reservada
**	-Literal
**	-Delimitador
**	-Operador
*/


//PALABRAS RESERVADAS

TOKEN : {
  		<ABSTRACT: "abstract">  
		|  <BOOLEAN: "boolean">
		|  <BREAK: "break">
		|  <CASE: "case">
		|  <CATCH: "catch">
		|  <CHAR: "char">
		|  <CLASS: "class">
		|  <CONST: "const">
		|  <CONTINUE: "continue">
		|  <DEFAULT_PLG: "default">
		|  <DO: "do">
		|  <DOUBLE: "double">
		|  <ELSE: "else">
		|  <EXTENDS :"extends">
		|  <FINAL :"final">
		|  <FINALLY :"finally">
		|  <FLOAT :"float">
		|  <FOR :"for">
		|  <GOTO :"goto">
		|  <IF :"if">
		|  <IMPLEMENTS :"implements">
		|  <IMPORT :"import">
		|  <INSTANCEOF :"instanceof">
		|  <INT :"int">
		|  <INTERFACE :"interface">
		|  <LONG :"long">
		|  <NEW :"new">
		|  <PACKAGE :"package">
		|  <PRIVATE :"private">
		|  <PROTECTED :"protected">
		|  <PUBLIC :"public">
		|  <RETURN :"return">
		|  <SHORT :"short">
		|  <STATIC :"static">
		|  <SUPER :"super">
		|  <SWITCH :"switch">
		|  <SYNCHRONIZED :"synchronized">
		|  <THIS :"this">
		|  <THROW :"throw">
		|  <THROWS :"throws">
		|  <TRY :"try">
		|  <VOID :"void">
		|  <VOLATILE :"volatile">
		|  <WHILE :"while">
		/*|  <TRUE :"true">  Si esto se descomenta expresiones como b = true || false; dan errores sintacticos... estupid\u00edsimo.
		|  <FALSE :"false">*/
}


//LITERALES
TOKEN :
{
  < LITERAL_INTEGER:  (<DIGITO>)+ >
|
  < LITERAL_FLOAT: ( (<DIGITO>)+ <PUNTO> (<DIGITO>)+ ) >
|
  < LITERAL_CARACTER: ( "'" ~[  "\'" ] "'" ) >
|
  < LITERAL_STRING: ( "\"" (~[ "\"", "\n" ])* "\"" ) >
| 
  < LITERAL_BOOLEAN :  ( "true" | "false" ) >
| 
  < LITERAL_NULL :  "null" >
}


//DELIMITADORES
TOKEN : {
  < PAR_A : "(" > |
  < PAR_C : ")" > |
  < LLAVE_A : "{" > |
  < LLAVE_C : "}" > |
  < COR_A : "[" > |
  < COR_C : "]" > |
  < PYC : ";" > |
  < COMA : "," > |
  < PUNTO : "." > |
  < PYP : ":" > |
  < PREG : "?" >
}

 
//OPERADORES
TOKEN : {
  < OR : "||" > |
  < AND : "&&" > |
  < OR_B : "|" > |
  < AND_B : "&" > |
  < IGUAL_IGUAL : "==" > |
  < N_IGUAL : "!=" > |
  < MENOR : "<" > |
  < MAYOR : ">" > |
  < MENOR_EQ : "<=" > |
  < MAYOR_EQ : ">=" > |
  < ADD : "+" > |
  < SUB : "-" > |
  < MULT : "*" > |
  < DIV : "/" > |
  < MOD : "%" > |
  < PLUS_PLUS : "++" > |
  < SUB_SUB : "--" > |
  < NOT : "!" > |
  < ADD_E : "+=" > |
  < SUB_E : "-=" > |
  < MULT_E : "*=" > |
  < DIV_E : "/=" > |
  < MOD_E : "%=" > |
  < AND_E : "&=" > |
  < OR_E : "|=" > |
  < EQUALS : "=" > |
  < DESP_D : ">>" > |
  < DESP_I : "<<" > |
  < DESP_DNS : ">>>" > |
  < XOR : "^" > |
  < COMP : "~" >
}

//IDENTIFICADOR
TOKEN : {
	< IDENTIFICADOR : ( "_" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	| 	( <LETRA> ( <LETRA> | <DIGITO> | "_" | "$" )* ) 
	| 	( "$" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	>
}


SimpleNode compilar():
{/*@bgen(jjtree) compilar */
  Nodocompilar jjtn000 = new Nodocompilar(JJTCOMPILAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) compilar */
  try {
/*@egen*/
  [ <PACKAGE> identificador() <PYC> ]
  ( <IMPORT> identificador() [ <PUNTO> <MULT> ] <PYC> )*
  ( declaracion_tipo() )*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


/* Descomentar si se quiere volver a la version antigua sin comprobacion sem\u00e1ntica de las funciones
void identificador() :
{
  Token t, t1 = null;
  String s = "";
  String restoTipo = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> t1=<IDENTIFICADOR> {restoTipo += "." + t1.image;} )*
  {
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtThis.value = t.image + restoTipo;

	//jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);
  }
}*/

Token identificador() :
{/*@bgen(jjtree) identificador */
  Nodoidentificador jjtn000 = new Nodoidentificador(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t, t1 = null;
  String restoTipo = "";
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) identificador */
  try {
/*@egen*/
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> t1=<IDENTIFICADOR> {restoTipo += "." + t1.image;} )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtn000.value = t.image + restoTipo;

	//jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);

    /* NECESITO ENVIAR ESTE STRING */
    s = t.image + restoTipo;
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

String literal()      :
{
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) LiteralInteger */
  {
    NodoLiteralInteger jjtn001 = new NodoLiteralInteger(JJTLITERALINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  s = literal_integer()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                { return s; }
|/*@bgen(jjtree) LiteralFloat */
  {
    NodoLiteralFloat jjtn002 = new NodoLiteralFloat(JJTLITERALFLOAT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ s = literal_float()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/               { return s; }
|/*@bgen(jjtree) LiteralCaracter */
  {
    NodoLiteralCaracter jjtn003 = new NodoLiteralCaracter(JJTLITERALCARACTER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtn003.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ s = literal_caracter()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtn003.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                  { return s; }
|/*@bgen(jjtree) LiteralString */
  {
    NodoLiteralString jjtn004 = new NodoLiteralString(JJTLITERALSTRING);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ s = literal_string()/*@bgen(jjtree)*/
  } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      throw (RuntimeException)jjte004;
    }
    if (jjte004 instanceof ParseException) {
      throw (ParseException)jjte004;
    }
    throw (Error)jjte004;
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                { return s; }
|/*@bgen(jjtree) LiteralBoolean */
  {
    NodoLiteralBoolean jjtn005 = new NodoLiteralBoolean(JJTLITERALBOOLEAN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ s = literal_boolean()/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtn005.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                
	{	if (s == "true")
			return ""+1;
		else
			return ""+0;
	}
|/*@bgen(jjtree) LiteralNull */
  {
    NodoLiteralNull jjtn006 = new NodoLiteralNull(JJTLITERALNULL);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtn006.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ s = literal_null()/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtn006.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/              { return s; }
}


String literal_integer()      : 
{
  	Token t = new Token();
	if (usaInterfaz)
    	InterfazPlg.escribirAvisos();
    	
}
{
	t = <LITERAL_INTEGER> { return t.image; }
}

String literal_float()      : 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_FLOAT> { return t.image; }
}

String literal_caracter()      : 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_CARACTER> { return t.image; }
}

String literal_string()      : 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_STRING> { return t.image; }
}

String literal_boolean()      : 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_BOOLEAN> { return t.image; }
}

String literal_null()      : 
{
  Token t = new Token();
if (usaInterfaz)
    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_NULL> { return t.image; }
}

/*
void tipo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( tipo_primitivo() | identificador() ) ( <COR_A> <COR_C> )*
}

*/

Token tipo() :
{/*@bgen(jjtree) tipo */
  Nodotipo jjtn000 = new Nodotipo(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String s = "";
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo */
  try {
/*@egen*/
  ( t = tipo_primitivo() | t = identificador() ) ( <COR_A> <COR_C> 
    { s += '[' + ']'; }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ //FIXME Aun no se bien como coger los corchetes(a lo mejor ni es necesario), preguntar a Ricky
  {
    return t;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
  
}

/* Descomentar si se quiere volver a la version antigua sin comprobacion sem\u00e1ntica de las funciones
void tipo_primitivo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  	(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})
    | <CHAR> { jjtThis.value = ConstantesTipos.CHAR;}
    | <SHORT> { jjtThis.value = ConstantesTipos.SHORT;}
    | <INT> { jjtThis.value = ConstantesTipos.INT;}
    | <LONG> { jjtThis.value = ConstantesTipos.LONG;}
    | <FLOAT> { jjtThis.value = ConstantesTipos.FLOAT;}
    | <DOUBLE> { jjtThis.value = ConstantesTipos.DOUBLE;}

}
*/

Token tipo_primitivo() :
{/*@bgen(jjtree) tipo_primitivo */
  Nodotipo_primitivo jjtn000 = new Nodotipo_primitivo(JJTTIPO_PRIMITIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo_primitivo */
        try {
/*@egen*/
  	//t =(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})<-- CAMBIO MIO(Ricardo el m\u00e1s guay), no entiendo que diferencia hay si le quitas los parentesis
  	t =<BOOLEAN>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ { jjtn000.value = ConstantesTipos.BOOLEAN; return t;}
    | t =<CHAR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ { jjtn000.value = ConstantesTipos.CHAR; return t;}
    | t =<SHORT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ { jjtn000.value = ConstantesTipos.SHORT; return t;}
    | t =<INT>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ { jjtn000.value = ConstantesTipos.INT; return t;}
    | t =<LONG>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ { jjtn000.value = ConstantesTipos.LONG; return t;}
    | t =<FLOAT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ { jjtn000.value = ConstantesTipos.FLOAT; return t;}
    | t =<DOUBLE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ { jjtn000.value = ConstantesTipos.DOUBLE; return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
    
    /* 
    * NECESITO DEVOLVER LA IMAGEN DEL TOKEN
    * return t.image
    * en lugar de:
    * return t
    */
}


void declaracion_tipo()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( ( <ABSTRACT> | <FINAL> | <PUBLIC> )* <CLASS> ) sim = declaracion_clase() 
	{ escribeFichero(sim.codigo); }
|
  sim = declaracion_interface() 
	{ escribeFichero(sim.codigo); }
|
  <PYC> { escribeFichero(sim.codigo); }
}

Token tipo_metodo() :
{/*@bgen(jjtree) tipo_metodo */
  Nodotipo_metodo jjtn000 = new Nodotipo_metodo(JJTTIPO_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String s = "";
  Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo_metodo */
  try {
/*@egen*/
  t=tipo()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/{
    jjtn000.value = t.image;
    return t;
  }
  |
  t=<VOID>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/{
    jjtn000.value = t.image;
    return t;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
  /* NECESITO DEVOLER EL STRING QUE ME VIENE DE TIPO O "VOID"
  * s = tipo() return s;
  * en void:
  * return t.image
  */
}
 

String lista_de_tipos()      :
{
  String s = "";
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = identificador()
  ( <COMA> t1 = identificador() { s = ',' + t1.image; } )*
  { return t.image + s; }
}

Simbolo declaracion_clase()      :
{
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  String s4 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( <ABSTRACT> | <FINAL> | <PUBLIC> )*
  <CLASS> t1 = <IDENTIFICADOR> [ <EXTENDS> t = identificador() { s2 = "extends" + t.image; } ] [ <IMPLEMENTS> s1 = lista_de_tipos() { s3 = "implements" + s1; } ]
  <LLAVE_A> ( sim1 = declaracion_cuerpo_clase() { s4+=sim1.codigo; } )* <LLAVE_C>
  { sim.codigo = "\nclass " + t1.image + ":\n";
      sim.codigo += s4;
      return sim;
    }
}

Simbolo declaracion_cuerpo_clase()      :
{
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  sim = inicializador_static()
  { return sim; }
|
  LOOKAHEAD( [ <PUBLIC> | <PROTECTED> | <PRIVATE> ] identificador() <PAR_A> )
  sim = declaracion_constructora()
  { return sim; }
|
  LOOKAHEAD( declaracionR_metodo() )
  sim = declaracion_metodo()
  { return sim; }
|
  sim = campo_declaracion()
  { return sim; }
}

Simbolo declaracionR_metodo()      :
{
  Token t = new Token();
  Token t1 = new Token();
  Token t2 = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <ABSTRACT> | t = <FINAL> | t = <SYNCHRONIZED> )*
  t2 = tipo_metodo() t1 = <IDENTIFICADOR> <PAR_A>
    { sim.codigo = t.image + t2.image + t1.image;
      return sim;
    }
}

Simbolo declaracion_interface()      :
{
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <ABSTRACT> | t = <PUBLIC> )*
  <INTERFACE> t1 = <IDENTIFICADOR> [ <EXTENDS> s2 = lista_de_tipos() {s1 = "extends" + s2;} ]
  <LLAVE_A> ( sim1 = declaracion_miembro_interface() {s3=sim1.codigo;} )* <LLAVE_C>
  { sim.codigo = t.image + "interface" + t1.image + s1 + '{' + s3 + '}';    
      return sim;
    }
}

Simbolo declaracion_miembro_interface()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( declaracionR_metodo() ) sim = declaracion_metodo() { return sim; }
|
  sim = campo_declaracion() 
  { sim.lugar = nuevaTemp();
    return sim; 
  }
}

Simbolo campo_declaracion() :
{/*@bgen(jjtree) campo_declaracion */
  Nodocampo_declaracion jjtn000 = new Nodocampo_declaracion(JJTCAMPO_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t = new Token();
  Token t1 = new Token();
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) campo_declaracion */
  try {
/*@egen*/
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <FINAL> | t = <VOLATILE> )*
  t1 = tipo() sim = declarador_variable() ( <COMA> sim1 = declarador_variable()  {sim.codigo += sim1.codigo;} )* <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/ 
  { return sim; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo declarador_variable()      :
{
  String aux = "";
  Simbolo sim1 = new Simbolo();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = declarador_variable_id() 
    [ <EQUALS> sim1 = iniciar_variable() 
      {
        if (!sim1.lugar.equals("new"))
        {
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + sim1.lugar + "\n";
        }
      }
    ]
    { return sim; }
}

Simbolo declarador_variable_id() :
{/*@bgen(jjtree) declarador_variable_id */
  Nododeclarador_variable_id jjtn000 = new Nododeclarador_variable_id(JJTDECLARADOR_VARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declarador_variable_id */
  try {
/*@egen*/
  t = <IDENTIFICADOR>
  {
    
    jjtn000.value = t.image;

	String lexema = t.image;
	if(!gestorTSIntermedia.estaLexema(lexema))	{
	  	Atributos a = new Atributos(lexema,"",false);//FIXME 		gestorTSIntermedia.insertar(lexema, a);
		System.out.println("TS: Insertando ident: "+ lexema +" con alias " +a.getAlias());
  	}
  	else  	{		System.err.println("No se puede insertar el lexema: "+lexema);
  	}
    
	//Atributos atribs = new Atributos(jjtThis.name, jjtThis.pilaTipos.peek());
	//Compilador.gestorTS.insertar(jjtThis.name, atribs);
	//System.out.println("Identificador: "+ jjtThis.name + " con tipo "+jjtThis.pilaTipos.peek());
  } ( <COR_A> <COR_C> /*{ s = '[' + ']';}*/ )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
    return sim;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo iniciar_variable()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s ="";
  String s1 = "";
  String s2 = "";
  /*if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }*/
}
{
  <LLAVE_A> [ sim1 = iniciar_variable() ( LOOKAHEAD(2) <COMA> sim2 = iniciar_variable() { s = ',' + s; } )* ] [ <COMA> { s2 = ',' + "";} ] <LLAVE_C>
  { return sim; }
|
  sim = expresion() { return sim; }
}

Simbolo declaracion_metodo() :
{/*@bgen(jjtree) declaracion_metodo */
  Nododeclaracion_metodo jjtn000 = new Nododeclaracion_metodo(JJTDECLARACION_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    
  Token t = new Token();
  Token t1 = new Token();
  String s ="";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_metodo */
  try {
/*@egen*/
  {gestorTSIntermedia.nuevoAmbito("");  }
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <ABSTRACT> | t = <FINAL> | t = <SYNCHRONIZED> )*
  t1 = tipo_metodo() sim = declarador_metodo() [ <THROWS> s1 = lista_de_tipos() {s2 = "throws" + s1;} ]
  ( sim1 = bloque() | <PYC> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
	gestorTSIntermedia.cierraAmbito();
      if(t1.image=="void") {
        sim.codigo += sim1.codigo + "&return\n";
          return sim;
        }
        else {
          sim.codigo += sim1.codigo;
          return sim;
        }
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
    
}

Simbolo declarador_metodo() :
{/*@bgen(jjtree) declarador_metodo */
  Nododeclarador_metodo jjtn000 = new Nododeclarador_metodo(JJTDECLARADOR_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t = new Token();
  String s = "";
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declarador_metodo */
  try {
/*@egen*/
  t = <IDENTIFICADOR> sim = parametros_formales() ( <COR_A> <COR_C> {s = '[' + ']' + "";} )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    sim.codigo = "&" + t.image +":\n";
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo parametros_formales()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PAR_A> [ sim1 = parametro_formal() ( <COMA> sim2 = parametro_formal() {s = ',' + sim2.codigo;} )* ] <PAR_C>
  {   
    sim.lugar = nuevaTemp();
    sim.codigo = '(' + sim1.codigo + s + ')';
    return sim;
  }
}

Simbolo parametro_formal()      :
{
  String s = "";
  String s1 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = tipo() sim1 = declarador_variable_id()
  { 
    sim.codigo = s + sim1.codigo;
    return sim; 
  }
}

Simbolo declaracion_constructora()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s ="";
  String s1 = "";
  Token t = new Token();
  Token t1;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  [ t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> ]
  t1 = <IDENTIFICADOR> sim1 = parametros_formales() [ <THROWS> s1 = lista_de_tipos() {s1 = "throws" + s1;} ]
  <LLAVE_A> [ LOOKAHEAD(2) sim2 = const_explic() ] ( sim3 = sentencia_bloque() )* <LLAVE_C>
  { 
    sim.lugar = nuevaTemp();
    sim.codigo = t.image + t1.image + sim1.codigo + s1 + '{' + sim2.codigo + sim3.codigo + '}';
    return sim;
  }
}

Simbolo const_explic()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <THIS> sim = argumentos() <PYC> 
  { 
    sim.codigo += "this" + sim.codigo + ';';
    return sim;
  }
|
  <SUPER> sim = argumentos() <PYC> 
  { 
    sim.codigo += "super" + sim.codigo + ';';
    return sim;
  }
}

Simbolo inicializador_static()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <STATIC> sim = bloque()
  { 
    sim.codigo += "static" + sim.codigo;
    return sim;
  }
}

Simbolo expresion()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  sim = asignacion() { return sim; }
|
  sim = expresion_cond() { return sim; }
}

Simbolo asignacion()               :
{/*@bgen(jjtree) #asignacion( 2) */
  Nodoasignacion jjtn000 = new Nodoasignacion(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String t = "";
  String aux = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) #asignacion( 2) */
   try {
/*@egen*/
   sim1 = expresion_primaria()
  t = operador_asignacion()
  sim2 = expresion()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000,  2);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { sim.lugar = sim1.lugar;
    sim.codigo = sim1.codigo;
  if (t == "=")
    {
      if (sim2.comienzo == "post"){
        sim.codigo += sim2.codigo;
        sim.codigo += sim.lugar + ":=" + sim2.lugar + "\n";
	    sim.codigo += sim2.verdadera;
      }
	  else{
	    sim.codigo += sim2.codigo;
	    sim.codigo += sim.lugar + ":=" + sim2.lugar + "\n";
      }
    }
    else
    {
      if (sim2.comienzo == "post")
      {
		aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\n";
		sim.codigo += sim1.lugar + ":=" + aux + "\n";
	    sim.codigo += sim2.verdadera;
      }
      else
      {
        aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\n";
        sim.codigo += sim1.lugar + ":=" + aux + "\n";
      }
    }
    return sim;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000,  2);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

String operador_asignacion()       :
{
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <EQUALS> { return "="; }
| t = <MULT_E> { return "*"; }
| t = <DIV_E> { return "/"; }
| t = <MOD_E> { return "%"; }
| t = <ADD_E> { return "+"; }
| t = <SUB_E> { return "-"; }
| t = <AND_E> { return "&"; }
| t = <OR_E> { return "|"; }
}

Simbolo expresion_cond()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_cond_or() [ <PREG>
  sim1 = expresion() <PYP>
  sim2 = expresion_cond()
  {
    sim.codigo+= sim1.codigo + sim2.codigo;
  }]
  { return sim; }
}

Simbolo expresion_cond_or()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_cond_and()
  ( t = <OR>/*@bgen(jjtree) #Or( 2) */
    {
      NodoOr jjtn001 = new NodoOr(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_cond_and()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.comienzo = nuevoIf();
      sim.falsa = elseIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 1" + ") goto " + sim.comienzo + "\n";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += sim.comienzo + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += "goto " + sim.siguiente + "\n";
      sim.codigo += sim.falsa + ":\n" + sim.lugar + ":=0\n";
      sim.codigo += sim.siguiente + ":\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_cond_and()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_or_bin()
  ( t = <AND>/*@bgen(jjtree) #And( 2) */
    {
      NodoAnd jjtn001 = new NodoAnd(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_or_bin()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/        
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.falsa = elseIf();
      sim.comienzo = nuevoIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += sim.lugar + ":=1\n";
      sim.codigo += "goto " + sim.siguiente + "\n";
      sim.codigo += sim.falsa + ":\n" + sim.lugar + ":=0\n";
      sim.codigo += sim.siguiente + ":\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_or_bin()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_xor()
  ( t = <OR_B>/*@bgen(jjtree) #BOr( 2) */
    {
      NodoBOr jjtn001 = new NodoBOr(JJTBOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_xor()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/         
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_xor()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_and_bin()
  ( t = <XOR>/*@bgen(jjtree) #XOr( 2) */
    {
      NodoXOr jjtn001 = new NodoXOr(JJTXOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_and_bin()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/        
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_and_bin()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_equal()
  ( t = <AND_B>/*@bgen(jjtree) #BAnd( 2) */
    {
      NodoBAnd jjtn001 = new NodoBAnd(JJTBAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_equal()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/         
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_equal()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_instanceof()
  ( ( t = <IGUAL_IGUAL>/*@bgen(jjtree) #IgualIgual( 2) */
      {
        NodoIgualIgual jjtn001 = new NodoIgualIgual(JJTIGUALIGUAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/
      sim1 = expresion_instanceof()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/               
      {
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += "if (" + s + "=" + sim1.lugar + ") goto " + s1 + "\n";
        sim.codigo += sim.lugar + ":=0\n";
        sim.codigo += "goto " + s2 + "\n";
        sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
        sim.codigo += s2 + ":\n";
      }
 |  t = <N_IGUAL>/*@bgen(jjtree) #NIgual( 2) */
    {
      NodoNIgual jjtn002 = new NodoNIgual(JJTNIGUAL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    sim1 = expresion_instanceof()/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/           
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + "!=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
    )
  )*
 { return sim; }
}

Simbolo expresion_instanceof()      :
{
  Simbolo sim = new Simbolo();
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_relacional() [ t = <INSTANCEOF>/*@bgen(jjtree) expresion_instanceof */
                                                  {
                                                    Nodoexpresion_instanceof jjtn001 = new Nodoexpresion_instanceof(JJTEXPRESION_INSTANCEOF);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
                                                  }
                                                  try {
/*@egen*/ t1 = tipo()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte001;
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      throw (ParseException)jjte001;
                                                    }
                                                    throw (Error)jjte001;
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/                      
    { sim.codigo += t.image + t1.image; }
  ]
  { return sim; }
}

Simbolo expresion_relacional()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_shift() 
  ( ( t = <MENOR>/*@bgen(jjtree) #Menor( 2) */
                  {
                    NodoMenor jjtn001 = new NodoMenor(JJTMENOR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ sim1 = expresion_shift()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/          
      {
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += "if (" + s + "<" + sim1.lugar + ") goto " + s1 + "\n";
        sim.codigo += sim.lugar + ":=0\n";
        sim.codigo += "goto " + s2 + "\n";
        sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
        sim.codigo += s2 + ":\n";
      }
  | t = <MAYOR>/*@bgen(jjtree) #Mayor( 2) */
                {
                  NodoMayor jjtn002 = new NodoMayor(JJTMAYOR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_shift()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/          
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + ">" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
  | t = <MENOR_EQ>/*@bgen(jjtree) #MenorEq( 2) */
                   {
                     NodoMenorEq jjtn003 = new NodoMenorEq(JJTMENOREQ);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                     jjtn003.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ sim1 = expresion_shift()/*@bgen(jjtree)*/
                   } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       throw (RuntimeException)jjte003;
                     }
                     if (jjte003 instanceof ParseException) {
                       throw (ParseException)jjte003;
                     }
                     throw (Error)jjte003;
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                       jjtn003.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/            
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + "<=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
  | t = <MAYOR_EQ>/*@bgen(jjtree) #MayorEq( 2) */
                   {
                     NodoMayorEq jjtn004 = new NodoMayorEq(JJTMAYOREQ);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                     jjtn004.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ sim1 = expresion_shift()/*@bgen(jjtree)*/
                   } catch (Throwable jjte004) {
                     if (jjtc004) {
                       jjtree.clearNodeScope(jjtn004);
                       jjtc004 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte004 instanceof RuntimeException) {
                       throw (RuntimeException)jjte004;
                     }
                     if (jjte004 instanceof ParseException) {
                       throw (ParseException)jjte004;
                     }
                     throw (Error)jjte004;
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  2);
                       jjtn004.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/            
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + ">=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
    )
  )*
  { return sim; }
}

Simbolo expresion_shift()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_add() 
  ( ( t = <DESP_I>/*@bgen(jjtree) #DespI( 2) */
                   {
                     NodoDespI jjtn001 = new NodoDespI(JJTDESPI);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ sim1 = expresion_add()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/          
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DESP_D>/*@bgen(jjtree) #DespD( 2) */
                   {
                     NodoDespD jjtn002 = new NodoDespD(JJTDESPD);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ sim1 = expresion_add()/*@bgen(jjtree)*/
                   } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       throw (RuntimeException)jjte002;
                     }
                     if (jjte002 instanceof ParseException) {
                       throw (ParseException)jjte002;
                     }
                     throw (Error)jjte002;
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/          
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DESP_DNS>/*@bgen(jjtree) #DespDNS( 2) */
                     {
                       NodoDespDNS jjtn003 = new NodoDespDNS(JJTDESPDNS);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                       jjtn003.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ sim1 = expresion_add()/*@bgen(jjtree)*/
                     } catch (Throwable jjte003) {
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         throw (RuntimeException)jjte003;
                       }
                       if (jjte003 instanceof ParseException) {
                         throw (ParseException)jjte003;
                       }
                       throw (Error)jjte003;
                     } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003,  2);
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/            
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      } 
    )
  )*
  { return sim; }
}

Simbolo expresion_add()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_mult() ( ( t = <ADD>/*@bgen(jjtree) #Add( 2) */
                                       {
                                         NodoAdd jjtn001 = new NodoAdd(JJTADD);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtn001.jjtSetFirstToken(getToken(1));
                                       }
                                       try {
/*@egen*/ sim1 = expresion_mult()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtn001.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/        
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <SUB>/*@bgen(jjtree) #Sub( 2) */
                {
                  NodoSub jjtn002 = new NodoSub(JJTSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_mult()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/        
      {
          aux = sim.lugar;
          sim.lugar = nuevaTemp();
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
        }
    )
  )*
  { return sim; }
}

Simbolo expresion_mult()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_unaria() 
  ( ( t = <MULT>/*@bgen(jjtree) #Mult( 2) */
                 {
                   NodoMult jjtn001 = new NodoMult(JJTMULT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/         
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DIV>/*@bgen(jjtree) #Div( 2) */
                {
                  NodoDiv jjtn002 = new NodoDiv(JJTDIV);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/        
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <MOD>/*@bgen(jjtree) #Mod( 2) */
                {
                  NodoMod jjtn003 = new NodoMod(JJTMOD);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/        
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    )
  )*
  { return sim; }
}

Simbolo expresion_unaria()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  (   t = <ADD>/*@bgen(jjtree) UnaryAdd */
                {
                  NodoUnaryAdd jjtn001 = new NodoUnaryAdd(JJTUNARYADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim = expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/          
      { return sim; }
    | t = <SUB>/*@bgen(jjtree) UnarySub */
                {
                  NodoUnarySub jjtn002 = new NodoUnarySub(JJTUNARYSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/          
      {
        sim.lugar = nuevaTemp();
        sim.codigo = sim1.codigo;
        sim.codigo += "-" + sim1.lugar + "\n";
        return sim;
      }
  ) 
|
  sim = expresion_pre_inc() { return sim; }
|
  sim = expresion_pre_dec() { return sim; }
|
  sim = expresion_unaria_dif() { return sim; }
}

Simbolo expresion_pre_inc()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <PLUS_PLUS>/*@bgen(jjtree) PlusPlus */
                  {
                    NodoPlusPlus jjtn001 = new NodoPlusPlus(JJTPLUSPLUS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ sim = expresion_primaria()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/          
  {
    sim.codigo += sim.lugar + ":=" + "++" + "\n";
    return sim;
  }
}

Simbolo expresion_pre_dec()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <SUB_SUB>/*@bgen(jjtree) SubSub */
                {
                  NodoSubSub jjtn001 = new NodoSubSub(JJTSUBSUB);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim = expresion_primaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/        
  {
    sim.codigo += sim.lugar + ":=" + "--" + "\n";
    return sim;
  }
}

Simbolo expresion_unaria_dif()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  (   t = <COMP>/*@bgen(jjtree) Comp */
                 {
                   NodoComp jjtn001 = new NodoComp(JJTCOMP);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/      
      {
        sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ~" + sim1.lugar + "\n";
      return sim;
      }
    | t = <NOT>/*@bgen(jjtree) Not */
                {
                  NodoNot jjtn002 = new NodoNot(JJTNOT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ sim1 = expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/     
      {
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ! " + sim1.lugar + "\n";
        return sim;
      }
  ) 
|
  LOOKAHEAD( look_cast() )
  sim = expresion_cast() { return sim; }
|
  sim = expresion_post() { return sim; }
}

String look_cast()      :
{
  String s, s1;
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  <PAR_A> t=tipo_primitivo() {return '(' + t.image;}
|
  LOOKAHEAD(<PAR_A> identificador() <COR_A>)
  <PAR_A> t=identificador() <COR_A> <COR_C> {return '(' + t.image + '[' + ']';}
|
  <PAR_A> t=identificador() <PAR_C>
  (
    <COMP> {return '(' + t.image + ')' + '~';}
    | <NOT> {return '(' + t.image + ')' + "not" ;}
    | <PAR_A> {return '(' + t.image + ')' + '(';}
    | t1=<IDENTIFICADOR> {return '(' + t.image + ')' + t1.image;}
    | <THIS> {return '(' + t.image + ')' + "this";}
    | <SUPER> {return '(' + t.image + ')' + "super";}
    | <NEW> {return '(' + t.image + ')' + "new";}
    | s1=literal() {return '(' + t.image + ')' + s1;}
  )
}

Simbolo expresion_post()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_primaria()
  [ t=<PLUS_PLUS> {s = t.image;}
    {    
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "++" + "\n";
    }
  | t=<SUB_SUB> {s = t.image;} 
    {
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "--" + "\n";
    }
  ]
  { //sim.codigo += sim.verdadera; 
    return sim; }
}

Simbolo expresion_cast()      :
{
  String s = "";
  String s2 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  <PAR_A> t=tipo_primitivo() ( <COR_A> <COR_C> {s2 += '[' + ']';} )* <PAR_C> sim1=expresion_unaria()
    { 
      sim.lugar = nuevaTemp();
      sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
      return sim;
    }
|
  <PAR_A> t=identificador() ( <COR_A> <COR_C> {s2 += '[' + ']';} )* <PAR_C> sim1=expresion_unaria_dif()
      { 
        sim.lugar = nuevaTemp();
        sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
        return sim;
      }
}

Simbolo expresion_primaria()      :
{
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim = new Simbolo();
  String aux = "";
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim1 = prefijo_primario()
  ( sim2 = sufijo_primario()
    {
      if (sim2.verdadera.equals("argumentos"))      {
        sim1.lugar = sim1.verdadera;
        sim1.verdadera = "";        sim2.codigo +="call " + sim1.lugar + ", " + sim2.comienzo + "\n";
      }
      else
      {
		s += sim2.lugar;
		s1 += sim2.codigo;
		sim2.lugar = s;
		sim2.codigo = s1;
      } 
    }
  )*
  {
    sim.lugar = sim1.lugar + sim2.lugar;
    sim.codigo = sim1.codigo + sim2.codigo;
    return sim;
  }
}

Simbolo prefijo_primario()      :
{
  Simbolo sim = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  s = literal()
  {
    sim.lugar = nuevaTemp();
    sim.codigo = sim.lugar + ":=" + s + "\n";
    return sim;
  }
|
  t = identificador()
  {
	if (gestorTSIntermedia.estaLexema(t.image))
		sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
	else
		sim.lugar = t.image;
    sim.verdadera = t.image;
    sim.codigo = "";
    return sim;
  }
|
  t = <THIS>
  {
    s = t.image;
    return sim;
  }
|
  <SUPER> <PUNTO> t = <IDENTIFICADOR>
  {
    return sim;
  }
|
  <PAR_A> sim = expresion() <PAR_C> { return sim; }
|
  sim = expresion_asignacion_array() { return sim; }  
}

Simbolo sufijo_primario()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <COR_A> sim1 = expresion() <COR_C>
  {
    sim.lugar = "[" + sim1.lugar+ "]";
    sim.codigo = sim1.codigo;
    return sim;
  }
|
  <PUNTO> t = <IDENTIFICADOR>
  {
    sim.lugar = "." + t.image;
    return sim;
  }
|
  sim = argumentos() { return sim; }
}

Simbolo argumentos()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PAR_A> [ sim = lista_argumentos() ] <PAR_C> { return sim; }
}

Simbolo lista_argumentos()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s;
  int numeroarg = 0;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim1 = expresion()
  { 
    sim.codigo = sim1.codigo;
    s = "param " + sim1.lugar + "\n";
    numeroarg++;
  }
  ( <COMA> sim2 = expresion()
    { 
    sim.codigo += sim2.codigo;
    s += "param " + sim2.lugar + "\n";
    numeroarg++;
    }
  )*
  {
    sim.verdadera = "argumentos"; 
    sim.codigo += s;
    return sim;
  }
}

Simbolo expresion_asignacion_array() :
{/*@bgen(jjtree) expresion_asignacion_array */
  Nodoexpresion_asignacion_array jjtn000 = new Nodoexpresion_asignacion_array(JJTEXPRESION_ASIGNACION_ARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_asignacion_array */
  try {
/*@egen*/
  LOOKAHEAD(2)
  <NEW> t=tipo_primitivo() sim1=dimensiones_array()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.lugar = "new";
    return sim;
  }
|
  <NEW> t=identificador() ( sim1=argumentos() | sim1=dimensiones_array() )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.lugar = "new";
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo dimensiones_array()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( LOOKAHEAD(2) <COR_A> sim1=expresion() <COR_C>
    { 
      sim.codigo = sim1.codigo;
      sim.codigo += '[' + sim1.lugar + ']'; 
    }
  )+
  ( LOOKAHEAD(2) <COR_A> <COR_C>
    { sim.codigo += '[' + ']'; }
  )*
  { return sim; }
}

Simbolo sentencia()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  sim = sentencia_etiqueta() { return sim; }
|
  sim = bloque() { return sim; }
|
  sim = sentencia_vacia() { return sim; }
|
  sim = expresion_sentencia() <PYC> { sim.codigo += sim.verdadera; return sim; }
|
  sim = sentencia_switch() { return sim; }
|
  sim = sentencia_if() { return sim; }
|
  sim = sentencia_while() { return sim; }
|
  sim = sentencia_do() { return sim; }
|
  sim = sentencia_for() { return sim; }
|
  sim = sentencia_break() { return sim; }
|
  sim = sentencia_continue() { return sim; }
|
  sim = sentencia_return() { return sim; }
|
  sim = sentencia_throw() { return sim; }
|
  sim = sentencia_synchronized() { return sim; }
|
  sim = sentencia_try() { return sim; }
}

Simbolo sentencia_etiqueta()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <IDENTIFICADOR> <PYP> sim1 = sentencia()
  { return sim; }
}

Simbolo bloque()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  
  <LLAVE_A> ( sim1 = sentencia_bloque(){sim.codigo += sim1.codigo;})* <LLAVE_C>
 
  { return sim; }
}

Simbolo sentencia_bloque()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(tipo() <IDENTIFICADOR>)
  sim = declaracion_variable_local() <PYC> { return sim; }
|
  sim = sentencia() { return sim; }
}

Simbolo declaracion_variable_local() :
{/*@bgen(jjtree) declaracion_variable_local */
  Nododeclaracion_variable_local jjtn000 = new Nododeclaracion_variable_local(JJTDECLARACION_VARIABLE_LOCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_variable_local */
  try {
/*@egen*/
  t = tipo() sim = declarador_variable() ( <COMA> sim1 = declarador_variable() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return sim; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_vacia()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PYC>
  { return sim; }
}

Simbolo expresion_sentencia() :
{/*@bgen(jjtree) expresion_sentencia */
  Nodoexpresion_sentencia jjtn000 = new Nodoexpresion_sentencia(JJTEXPRESION_SENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_sentencia */
  try {
/*@egen*/
  sim = expresion_pre_inc()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
/*@egen*/ { return sim; }
|
  sim = expresion_pre_dec()/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
/*@egen*/ { return sim; }
|
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  sim = asignacion()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return sim; }
|
  sim = expresion_post()/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
/*@egen*/ { return sim; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_switch() :
{/*@bgen(jjtree) sentencia_switch */
  Nodosentencia_switch jjtn000 = new Nodosentencia_switch(JJTSENTENCIA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/

  gestorTSIntermedia.nuevoAmbito(""); 
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  String s1 = "";
  String s2 = "";
  String etiqCase = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_switch */
  try {
/*@egen*/
  <SWITCH> <PAR_A> sim3 = expresion() <PAR_C> <LLAVE_A>
  {
    sim.comienzo = nuevoIf();
    sim.siguiente = finIf();
    etiqCase = nuevoCase(); //hacer
    sim.codigo = sim.comienzo + ":\n";
  }
    ( sim1 = etiqueta_switch()
      { sim4 = new Simbolo(); }
        ( sim2 = sentencia_bloque()
          { sim4.codigo += sim2.codigo; }
        )*
          {
            if (sim1.lugar != "default")
              {
                s1 = nuevaEtiq();
                s2 = nuevaEtiq();
                sim.codigo += sim1.codigo;
                sim.codigo += "if (" + sim3.lugar + "=" + sim1.lugar + ") goto " + s1 + "\n";
                sim.codigo += sim1.lugar + ":=0\n";
                sim.codigo += "goto " + s2 + "\n";
                sim.codigo += s1 + ":\n" + sim1.lugar + ":=1\n";
                sim.codigo += s2 + ":\nif (" + sim1.lugar + "=0) goto " + etiqCase + "\n";
                sim.codigo += sim4.codigo;
                
                if (sim2.lugar == "break")
                  sim.codigo += "goto " + sim.siguiente +"\n";
              
                sim.codigo += etiqCase + ":\n";
                etiqCase = nuevoCase();
              }
            else
              { sim.codigo += sim4.codigo; }
          }
    )*
   { sim.codigo += sim.siguiente + ":\n"; }
  <LLAVE_C>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    gestorTSIntermedia.cierraAmbito();  
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo etiqueta_switch() :
{/*@bgen(jjtree) etiqueta_switch */
  Nodoetiqueta_switch jjtn000 = new Nodoetiqueta_switch(JJTETIQUETA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) etiqueta_switch */
  try {
/*@egen*/
  <CASE> sim = expresion() <PYP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return sim; }
|
  <DEFAULT_PLG> <PYP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { sim.lugar = "default";
    return sim; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_if() :
{/*@bgen(jjtree) sentencia_if */
  Nodosentencia_if jjtn000 = new Nodosentencia_if(JJTSENTENCIA_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  gestorTSIntermedia.nuevoAmbito(""); 
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Boolean hayelse = false;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_if */
  try {
/*@egen*/

  <IF> <PAR_A> sim1 = expresion() <PAR_C> sim2 = sentencia()
  [ LOOKAHEAD(1) <ELSE> sim3 = sentencia() { hayelse = true; } ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    
    sim.comienzo = nuevoIf();
    if (hayelse) sim.falsa = elseIf();
    sim.siguiente = finIf();
    sim.codigo = sim1.codigo;
    if (hayelse)
      {
        sim.codigo += "goto " + sim.comienzo + "\n";
        sim.codigo += sim.comienzo + ":\n";
        sim.codigo += "if (" + sim1.lugar + "=0) goto " + sim.falsa + "\n";
        sim.codigo += sim2.codigo;
        sim.codigo += "goto " + sim.siguiente + "\n";
        sim.codigo += sim.falsa + ":\n";
        sim.codigo += sim3.codigo;
        sim.codigo += sim.siguiente + ":\n";
      }
    else
      {
        sim.codigo += "goto " + sim.comienzo + "\n";
        sim.codigo += sim.comienzo + ":\n" + "if (" + sim1.lugar + "=0) goto " + sim.siguiente + "\n";
        sim.codigo += sim2.codigo;
        sim.codigo += sim.siguiente + ": \n";
      }

	gestorTSIntermedia.cierraAmbito();
    
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_while() :
{/*@bgen(jjtree) sentencia_while */
  Nodosentencia_while jjtn000 = new Nodosentencia_while(JJTSENTENCIA_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_while */
  try {
/*@egen*/
  <WHILE> <PAR_A> sim1 = expresion() <PAR_C> sim2=sentencia()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\n";
    sim.codigo += sim1.codigo;
    sim.codigo += "if (" + sim1.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += sim2.codigo;
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";

	gestorTSIntermedia.cierraAmbito(); 
    
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_do() :
{/*@bgen(jjtree) sentencia_do */
  Nodosentencia_do jjtn000 = new Nodosentencia_do(JJTSENTENCIA_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/

  gestorTSIntermedia.nuevoAmbito(""); 
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_do */
  try {
/*@egen*/
  <DO> sim1 = sentencia() <WHILE> <PAR_A> sim2 = expresion() <PAR_C> <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\n";
    sim.codigo += sim1.codigo;
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";

    gestorTSIntermedia.cierraAmbito(); 
    return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_for() :
{/*@bgen(jjtree) sentencia_for */
  Nodosentencia_for jjtn000 = new Nodosentencia_for(JJTSENTENCIA_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_for */
  try {
/*@egen*/
  <FOR> <PAR_A> [ sim1 = inicio_for() ] <PYC> [ sim2 = expresion() ] <PYC> [ sim3 = actualizar_for() ] <PAR_C> sim4 = sentencia()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim1.codigo;
    sim.codigo += sim.comienzo + ":\n";
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += sim4.codigo;
    sim.codigo += sim3.codigo;
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";
    gestorTSIntermedia.cierraAmbito(); 
  return sim;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo lista_expresion_sentencia()      :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_sentencia() ( <COMA> sim2 = expresion_sentencia() )*
  { return sim; }
}

Simbolo inicio_for()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( tipo() <IDENTIFICADOR> )
  sim = declaracion_variable_local()
  { return sim; }
|
  sim = lista_expresion_sentencia()
  { return sim; }
}

Simbolo actualizar_for()      :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = lista_expresion_sentencia()
  { return sim; }
}

Simbolo sentencia_break() :
{/*@bgen(jjtree) sentencia_break */
  Nodosentencia_break jjtn000 = new Nodosentencia_break(JJTSENTENCIA_BREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ String s = "";
  Token t = new Token();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_break */
  try {
/*@egen*/
  <BREAK> [ t=<IDENTIFICADOR> {s = t.image;} ] <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { 
    sim.lugar = "break";
    return sim; 
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_continue() :
{/*@bgen(jjtree) sentencia_continue */
  Nodosentencia_continue jjtn000 = new Nodosentencia_continue(JJTSENTENCIA_CONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_continue */
  try {
/*@egen*/
  <CONTINUE> [ t=<IDENTIFICADOR> {s = t.image;} ] <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { sim.codigo = "continue" + s + ';';
    return sim; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_return() :
{/*@bgen(jjtree) sentencia_return */
  Nodosentencia_return jjtn000 = new Nodosentencia_return(JJTSENTENCIA_RETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ String s = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_return */
  try {
/*@egen*/
  <RETURN> [ sim1 = expresion() { s = sim1.codigo; } ] <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { 
    sim.codigo = sim1.codigo;
    sim.codigo += "&return " + sim1.lugar + "\n";
    return sim; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_throw() :
{/*@bgen(jjtree) sentencia_throw */
  Nodosentencia_throw jjtn000 = new Nodosentencia_throw(JJTSENTENCIA_THROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_throw */
  try {
/*@egen*/
  <THROW> sim1=expresion() <PYC>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { 
    sim.codigo = "throw" + sim1.codigo + ';';
    return sim; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_synchronized() :
{/*@bgen(jjtree) sentencia_synchronized */
  Nodosentencia_synchronized jjtn000 = new Nodosentencia_synchronized(JJTSENTENCIA_SYNCHRONIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_synchronized */
  try {
/*@egen*/
  <SYNCHRONIZED> <PAR_A> sim1=expresion() <PAR_C> sim2 = bloque()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { 
    sim.codigo = "synchronized" + '(' + sim1.codigo + ')' + sim2.codigo;
    return sim; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Simbolo sentencia_try() :
{/*@bgen(jjtree) sentencia_try */
  Nodosentencia_try jjtn000 = new Nodosentencia_try(JJTSENTENCIA_TRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  Simbolo sim5 = new Simbolo();
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_try */
  try {
/*@egen*/
  <TRY> sim1 = bloque()
  ( <CATCH> <PAR_A> sim5=parametro_formal() <PAR_C> sim3=bloque() {s = "cath" + '(' + sim5.codigo + ')' + sim3.codigo;} )*
  [ <FINALLY> sim4 = bloque() {s1 = "finally" + sim4.codigo;} ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { 
    sim.codigo = "try" + sim1.codigo + s + s1;
    gestorTSIntermedia.cierraAmbito();
    return sim; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}