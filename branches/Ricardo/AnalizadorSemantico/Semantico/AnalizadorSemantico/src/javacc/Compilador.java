/* Generated By:JJTree&JavaCC: Do not edit this line. Compilador.java */
package javacc;

import tabla.simbolos.CGestorTS;
import tabla.simbolos.Atributos;
import interfaz.InterfazPlg;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants, CompiladorConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();public static CGestorTS gestorTS;
  public static boolean usaInterfaz = false;

  public static void main ( String args [ ] ) {

      //Inicialización del analizador
      Compilador compilador;
      usaInterfaz = false;
      initGestorTS();

      if(args.length == 0){

        System.out.println ("Compilador: Leyendo de fichero ");
        try {
          compilador = new Compilador(new java.io.FileInputStream("ProgramaPrueba.java"));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero no ha sido encontrado.");
          return;
        }
      }
      else if(args.length == 1){
        System.out.println ("Compilador: Leyendo de fichero " + args[0] + " ..." );
        try {
          compilador = new Compilador(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("Compilador:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
      try {
        SimpleNode root = Compilador.compilar();
        root.dump("");
        System.out.println ("Compilador: La entrada ha sido leida con \u00e9xito.");
        jjtree.rootNode().interpret();
      }
      catch(ParseException e){
        System.out.println ("Compilador: Ha ocurrido un error durante el an\u00e1lisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Compilador: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }

        public static void initGestorTS(){
                //Inicialización Tabla de Símbolos y Gestor de Ámbitos
            gestorTS = new CGestorTS();
        }

        public Node rootNode() {
        return jjtree.rootNode();
        }

  static final public SimpleNode compilar() throws ParseException {
 /*@bgen(jjtree) compilar */
  Nodocompilar jjtn000 = new Nodocompilar(JJTCOMPILAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        identificador();
        jj_consume_token(PYC);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
        identificador();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUNTO:
          jj_consume_token(PUNTO);
          jj_consume_token(MULT);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(PYC);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case FINAL:
        case INTERFACE:
        case PUBLIC:
        case PYC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        declaracion_tipo();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void identificador() throws ParseException {
 /*@bgen(jjtree) identificador */
  Nodoidentificador jjtn000 = new Nodoidentificador(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = jj_consume_token(IDENTIFICADOR);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(PUNTO);
        jj_consume_token(IDENTIFICADOR);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    System.out.println("Identificador "+t.toString());
    Atributos atribs = new Atributos(t.toString(), "nada");
    gestorTS.insertar(t.toString(), atribs);
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

        jjtn000.value = t.image;
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);

    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void literal() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_INTEGER:
    NodoLiteralInteger jjtn001 = new NodoLiteralInteger(JJTLITERALINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        literal_integer();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
      break;
    case LITERAL_FLOAT:
                                        NodoLiteralFloat jjtn002 = new NodoLiteralFloat(JJTLITERALFLOAT);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
        literal_float();
      } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtn002.jjtSetLastToken(getToken(0));
                                        }
      }
      break;
    case LITERAL_CARACTER:
                                                                        NodoLiteralCaracter jjtn003 = new NodoLiteralCaracter(JJTLITERALCARACTER);
                                                                        boolean jjtc003 = true;
                                                                        jjtree.openNodeScope(jjtn003);
                                                                        jjtn003.jjtSetFirstToken(getToken(1));
      try {
        literal_caracter();
      } catch (Throwable jjte003) {
                                                                        if (jjtc003) {
                                                                          jjtree.clearNodeScope(jjtn003);
                                                                          jjtc003 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte003 instanceof RuntimeException) {
                                                                          {if (true) throw (RuntimeException)jjte003;}
                                                                        }
                                                                        if (jjte003 instanceof ParseException) {
                                                                          {if (true) throw (ParseException)jjte003;}
                                                                        }
                                                                        {if (true) throw (Error)jjte003;}
      } finally {
                                                                        if (jjtc003) {
                                                                          jjtree.closeNodeScope(jjtn003, true);
                                                                          jjtn003.jjtSetLastToken(getToken(0));
                                                                        }
      }
      break;
    case LITERAL_STRING:
                                                                                                              NodoLiteralString jjtn004 = new NodoLiteralString(JJTLITERALSTRING);
                                                                                                              boolean jjtc004 = true;
                                                                                                              jjtree.openNodeScope(jjtn004);
                                                                                                              jjtn004.jjtSetFirstToken(getToken(1));
      try {
        literal_string();
      } catch (Throwable jjte004) {
                                                                                                              if (jjtc004) {
                                                                                                                jjtree.clearNodeScope(jjtn004);
                                                                                                                jjtc004 = false;
                                                                                                              } else {
                                                                                                                jjtree.popNode();
                                                                                                              }
                                                                                                              if (jjte004 instanceof RuntimeException) {
                                                                                                                {if (true) throw (RuntimeException)jjte004;}
                                                                                                              }
                                                                                                              if (jjte004 instanceof ParseException) {
                                                                                                                {if (true) throw (ParseException)jjte004;}
                                                                                                              }
                                                                                                              {if (true) throw (Error)jjte004;}
      } finally {
                                                                                                              if (jjtc004) {
                                                                                                                jjtree.closeNodeScope(jjtn004, true);
                                                                                                                jjtn004.jjtSetLastToken(getToken(0));
                                                                                                              }
      }
      break;
    case LITERAL_BOOLEAN:
                                                                                                                                                NodoLiteralBoolean jjtn005 = new NodoLiteralBoolean(JJTLITERALBOOLEAN);
                                                                                                                                                boolean jjtc005 = true;
                                                                                                                                                jjtree.openNodeScope(jjtn005);
                                                                                                                                                jjtn005.jjtSetFirstToken(getToken(1));
      try {
        literal_boolean();
      } catch (Throwable jjte005) {
                                                                                                                                                if (jjtc005) {
                                                                                                                                                  jjtree.clearNodeScope(jjtn005);
                                                                                                                                                  jjtc005 = false;
                                                                                                                                                } else {
                                                                                                                                                  jjtree.popNode();
                                                                                                                                                }
                                                                                                                                                if (jjte005 instanceof RuntimeException) {
                                                                                                                                                  {if (true) throw (RuntimeException)jjte005;}
                                                                                                                                                }
                                                                                                                                                if (jjte005 instanceof ParseException) {
                                                                                                                                                  {if (true) throw (ParseException)jjte005;}
                                                                                                                                                }
                                                                                                                                                {if (true) throw (Error)jjte005;}
      } finally {
                                                                                                                                                if (jjtc005) {
                                                                                                                                                  jjtree.closeNodeScope(jjtn005, true);
                                                                                                                                                  jjtn005.jjtSetLastToken(getToken(0));
                                                                                                                                                }
      }
      break;
    case LITERAL_NULL:
                                                                                                                                                                                    NodoLiteralNull jjtn006 = new NodoLiteralNull(JJTLITERALNULL);
                                                                                                                                                                                    boolean jjtc006 = true;
                                                                                                                                                                                    jjtree.openNodeScope(jjtn006);
                                                                                                                                                                                    jjtn006.jjtSetFirstToken(getToken(1));
      try {
        literal_null();
      } catch (Throwable jjte006) {
                                                                                                                                                                                    if (jjtc006) {
                                                                                                                                                                                      jjtree.clearNodeScope(jjtn006);
                                                                                                                                                                                      jjtc006 = false;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      jjtree.popNode();
                                                                                                                                                                                    }
                                                                                                                                                                                    if (jjte006 instanceof RuntimeException) {
                                                                                                                                                                                      {if (true) throw (RuntimeException)jjte006;}
                                                                                                                                                                                    }
                                                                                                                                                                                    if (jjte006 instanceof ParseException) {
                                                                                                                                                                                      {if (true) throw (ParseException)jjte006;}
                                                                                                                                                                                    }
                                                                                                                                                                                    {if (true) throw (Error)jjte006;}
      } finally {
                                                                                                                                                                                    if (jjtc006) {
                                                                                                                                                                                      jjtree.closeNodeScope(jjtn006, true);
                                                                                                                                                                                      jjtn006.jjtSetLastToken(getToken(0));
                                                                                                                                                                                    }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void literal_integer() throws ParseException {
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_INTEGER);
  }

  static final public void literal_float() throws ParseException {
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_FLOAT);
  }

  static final public void literal_caracter() throws ParseException {
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_CARACTER);
  }

  static final public void literal_string() throws ParseException {
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_STRING);
  }

  static final public void literal_boolean() throws ParseException {
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_BOOLEAN);
  }

  static final public void literal_null() throws ParseException {
if (usaInterfaz)
    InterfazPlg.escribirAvisos();
    jj_consume_token(LITERAL_NULL);
  }

  static final public void tipo() throws ParseException {
 /*@bgen(jjtree) tipo */
  Nodotipo jjtn000 = new Nodotipo(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        tipo_primitivo();
        break;
      case IDENTIFICADOR:
        identificador();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void tipo_primitivo() throws ParseException {
 /*@bgen(jjtree) tipo_primitivo */
  Nodotipo_primitivo jjtn000 = new Nodotipo_primitivo(JJTTIPO_PRIMITIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                     jjtn000.nodeType = "boolean";
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
               jjtn000.nodeType = "int";
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void declaracion_tipo() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_2(2147483647)) {
      declaracion_clase();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PUBLIC:
        declaracion_interface();
        break;
      case PYC:
        jj_consume_token(PYC);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void tipo_metodo() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFICADOR:
      tipo();
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void lista_de_tipos() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    identificador();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      identificador();
    }
  }

  static final public void declaracion_clase() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      identificador();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      lista_de_tipos();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case VOID:
      case VOLATILE:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      declaracion_cuerpo_clase();
    }
    jj_consume_token(LLAVE_C);
  }

  static final public void declaracion_cuerpo_clase() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_3(2)) {
      inicializador_static();
    } else if (jj_2_4(2147483647)) {
      declaracion_constructora();
    } else if (jj_2_5(2147483647)) {
      declaracion_metodo();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case VOLATILE:
      case IDENTIFICADOR:
        campo_declaracion();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void declaracionR_metodo() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    tipo_metodo();
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PAR_A);
  }

  static final public void declaracion_interface() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      lista_de_tipos();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case VOID:
      case VOLATILE:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      declaracion_miembro_interface();
    }
    jj_consume_token(LLAVE_C);
  }

  static final public void declaracion_miembro_interface() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_6(2147483647)) {
      declaracion_metodo();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case VOLATILE:
      case IDENTIFICADOR:
        campo_declaracion();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void campo_declaracion() throws ParseException {
 /*@bgen(jjtree) campo_declaracion */
  Nodocampo_declaracion jjtn000 = new Nodocampo_declaracion(JJTCAMPO_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOLATILE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        case STATIC:
          jj_consume_token(STATIC);
          break;
        case FINAL:
          jj_consume_token(FINAL);
          break;
        case VOLATILE:
          jj_consume_token(VOLATILE);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      tipo();
      declarador_variable();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        declarador_variable();
      }
      jj_consume_token(PYC);
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                                         jjtn000.pilaTipos.clear();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void declarador_variable() throws ParseException {
 /*@bgen(jjtree) declarador_variable */
  Nododeclarador_variable jjtn000 = new Nododeclarador_variable(JJTDECLARADOR_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      declarador_variable_id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        iniciar_variable();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void declarador_variable_id() throws ParseException {
 /*@bgen(jjtree) declarador_variable_id */
  Nododeclarador_variable_id jjtn000 = new Nododeclarador_variable_id(JJTDECLARADOR_VARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = jj_consume_token(IDENTIFICADOR);
                        jjtn000.name = t.image;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void iniciar_variable() throws ParseException {
 /*@bgen(jjtree) iniciar_variable */
  Nodoiniciar_variable jjtn000 = new Nodoiniciar_variable(JJTINICIAR_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVE_A:
        jj_consume_token(LLAVE_A);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case LITERAL_INTEGER:
        case LITERAL_FLOAT:
        case LITERAL_CARACTER:
        case LITERAL_STRING:
        case LITERAL_BOOLEAN:
        case LITERAL_NULL:
        case PAR_A:
        case LLAVE_A:
        case ADD:
        case SUB:
        case PLUS_PLUS:
        case SUB_SUB:
        case NOT:
        case COMP:
        case IDENTIFICADOR:
          iniciar_variable();
          label_14:
          while (true) {
            if (jj_2_7(2)) {
              ;
            } else {
              break label_14;
            }
            jj_consume_token(COMA);
            iniciar_variable();
          }
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          jj_consume_token(COMA);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        jj_consume_token(LLAVE_C);
        break;
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        expresion();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void declaracion_metodo() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    tipo_metodo();
    declarador_metodo();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      lista_de_tipos();
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVE_A:
      bloque();
      break;
    case PYC:
      jj_consume_token(PYC);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declarador_metodo() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(IDENTIFICADOR);
    parametros_formales();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COR_A:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_16;
      }
      jj_consume_token(COR_A);
      jj_consume_token(COR_C);
    }
  }

  static final public void parametros_formales() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PAR_A);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFICADOR:
      parametro_formal();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMA);
        parametro_formal();
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
  }

  static final public void parametro_formal() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    tipo();
    declarador_variable_id();
  }

  static final public void declaracion_constructora() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFICADOR);
    parametros_formales();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      lista_de_tipos();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    if (jj_2_8(2)) {
      const_explic();
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      sentencia_bloque();
    }
    jj_consume_token(LLAVE_C);
  }

  static final public void const_explic() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      argumentos();
      jj_consume_token(PYC);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      argumentos();
      jj_consume_token(PYC);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void inicializador_static() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(STATIC);
    bloque();
  }

  static final public void expresion() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_9(2147483647)) {
      asignacion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        expresion_cond();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void asignacion() throws ParseException {
 /*@bgen(jjtree) #asignacion( 2) */
  Nodoasignacion jjtn000 = new Nodoasignacion(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      expresion_primaria();
      operador_asignacion();
      expresion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void operador_asignacion() throws ParseException {
 /*@bgen(jjtree) operador_asignacion */
  Nodooperador_asignacion jjtn000 = new Nodooperador_asignacion(JJTOPERADOR_ASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case MULT_E:
        jj_consume_token(MULT_E);
        break;
      case DIV_E:
        jj_consume_token(DIV_E);
        break;
      case MOD_E:
        jj_consume_token(MOD_E);
        break;
      case ADD_E:
        jj_consume_token(ADD_E);
        break;
      case SUB_E:
        jj_consume_token(SUB_E);
        break;
      case AND_E:
        jj_consume_token(AND_E);
        break;
      case OR_E:
        jj_consume_token(OR_E);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void expresion_cond() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_cond_or();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREG:
      jj_consume_token(PREG);
      expresion();
      jj_consume_token(PYP);
      expresion_cond();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  static final public void expresion_cond_or() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_cond_and();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_19;
      }
      jj_consume_token(OR);
                                NodoOr jjtn001 = new NodoOr(JJTOR);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        expresion_cond_and();
      } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
      }
    }
  }

  static final public void expresion_cond_and() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_or_bin();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_20;
      }
      jj_consume_token(AND);
                               NodoAnd jjtn001 = new NodoAnd(JJTAND);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        expresion_or_bin();
      } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
      }
    }
  }

  static final public void expresion_or_bin() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_xor();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_B:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_21;
      }
      jj_consume_token(OR_B);
                             NodoBOr jjtn001 = new NodoBOr(JJTBOR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtn001.jjtSetFirstToken(getToken(1));
      try {
        expresion_xor();
      } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtn001.jjtSetLastToken(getToken(0));
                             }
      }
    }
  }

  static final public void expresion_xor() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_and_bin();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_22;
      }
      jj_consume_token(XOR);
                                NodoXOr jjtn001 = new NodoXOr(JJTXOR);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        expresion_and_bin();
      } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
      }
    }
  }

  static final public void expresion_and_bin() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_equal();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_B:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_23;
      }
      jj_consume_token(AND_B);
                                NodoBAnd jjtn001 = new NodoBAnd(JJTBAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        expresion_equal();
      } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
      }
    }
  }

  static final public void expresion_equal() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_instanceof();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
      case N_IGUAL:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        jj_consume_token(IGUAL);
                                       NodoIgual jjtn001 = new NodoIgual(JJTIGUAL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_instanceof();
        } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
        }
        break;
      case N_IGUAL:
        jj_consume_token(N_IGUAL);
                                                                      NodoNIgual jjtn002 = new NodoNIgual(JJTNIGUAL);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
                                                                      jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_instanceof();
        } catch (Throwable jjte002) {
                                                                      if (jjtc002) {
                                                                        jjtree.clearNodeScope(jjtn002);
                                                                        jjtc002 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte002 instanceof RuntimeException) {
                                                                        {if (true) throw (RuntimeException)jjte002;}
                                                                      }
                                                                      if (jjte002 instanceof ParseException) {
                                                                        {if (true) throw (ParseException)jjte002;}
                                                                      }
                                                                      {if (true) throw (Error)jjte002;}
        } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                        jjtn002.jjtSetLastToken(getToken(0));
                                                                      }
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_instanceof() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_relacional();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      tipo();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
  }

  static final public void expresion_relacional() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_shift();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
      case MAYOR:
      case MENOR_EQ:
      case MAYOR_EQ:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        jj_consume_token(MENOR);
                                  NodoMenor jjtn001 = new NodoMenor(JJTMENOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_shift();
        } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
        }
        break;
      case MAYOR:
        jj_consume_token(MAYOR);
                                                            NodoMayor jjtn002 = new NodoMayor(JJTMAYOR);
                                                            boolean jjtc002 = true;
                                                            jjtree.openNodeScope(jjtn002);
                                                            jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_shift();
        } catch (Throwable jjte002) {
                                                            if (jjtc002) {
                                                              jjtree.clearNodeScope(jjtn002);
                                                              jjtc002 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte002 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte002;}
                                                            }
                                                            if (jjte002 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte002;}
                                                            }
                                                            {if (true) throw (Error)jjte002;}
        } finally {
                                                            if (jjtc002) {
                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                              jjtn002.jjtSetLastToken(getToken(0));
                                                            }
        }
        break;
      case MENOR_EQ:
        jj_consume_token(MENOR_EQ);
                                                               NodoMenorEq jjtn003 = new NodoMenorEq(JJTMENOREQ);
                                                               boolean jjtc003 = true;
                                                               jjtree.openNodeScope(jjtn003);
                                                               jjtn003.jjtSetFirstToken(getToken(1));
        try {
          expresion_shift();
        } catch (Throwable jjte003) {
                                                               if (jjtc003) {
                                                                 jjtree.clearNodeScope(jjtn003);
                                                                 jjtc003 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte003 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte003;}
                                                               }
                                                               if (jjte003 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte003;}
                                                               }
                                                               {if (true) throw (Error)jjte003;}
        } finally {
                                                               if (jjtc003) {
                                                                 jjtree.closeNodeScope(jjtn003,  2);
                                                                 jjtn003.jjtSetLastToken(getToken(0));
                                                               }
        }
        break;
      case MAYOR_EQ:
        jj_consume_token(MAYOR_EQ);
                                                               NodoMayorEq jjtn004 = new NodoMayorEq(JJTMAYOREQ);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                               jjtn004.jjtSetFirstToken(getToken(1));
        try {
          expresion_shift();
        } catch (Throwable jjte004) {
                                                               if (jjtc004) {
                                                                 jjtree.clearNodeScope(jjtn004);
                                                                 jjtc004 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte004 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte004;}
                                                               }
                                                               if (jjte004 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte004;}
                                                               }
                                                               {if (true) throw (Error)jjte004;}
        } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                 jjtn004.jjtSetLastToken(getToken(0));
                                                               }
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_shift() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_add();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESP_D:
      case DESP_I:
      case DESP_DNS:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESP_I:
        jj_consume_token(DESP_I);
                                 NodoDespI jjtn001 = new NodoDespI(JJTDESPI);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_add();
        } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
        }
        break;
      case DESP_D:
        jj_consume_token(DESP_D);
                                                     NodoDespD jjtn002 = new NodoDespD(JJTDESPD);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
                                                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_add();
        } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
        } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002,  2);
                                                       jjtn002.jjtSetLastToken(getToken(0));
                                                     }
        }
        break;
      case DESP_DNS:
        jj_consume_token(DESP_DNS);
                                                       NodoDespDNS jjtn003 = new NodoDespDNS(JJTDESPDNS);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
                                                       jjtn003.jjtSetFirstToken(getToken(1));
        try {
          expresion_add();
        } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte003;}
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte003;}
                                                       }
                                                       {if (true) throw (Error)jjte003;}
        } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003,  2);
                                                         jjtn003.jjtSetLastToken(getToken(0));
                                                       }
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_add() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_mult();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
                               NodoAdd jjtn001 = new NodoAdd(JJTADD);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_mult();
        } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
        }
        break;
      case SUB:
        jj_consume_token(SUB);
                                                   NodoSub jjtn002 = new NodoSub(JJTSUB);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                   jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_mult();
        } catch (Throwable jjte002) {
                                                   if (jjtc002) {
                                                     jjtree.clearNodeScope(jjtn002);
                                                     jjtc002 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte002 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte002;}
                                                   }
                                                   if (jjte002 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte002;}
                                                   }
                                                   {if (true) throw (Error)jjte002;}
        } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002,  2);
                                                     jjtn002.jjtSetLastToken(getToken(0));
                                                   }
        }
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_mult() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_unaria();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
                                  NodoMult jjtn001 = new NodoMult(JJTMULT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
        }
        break;
      case DIV:
        jj_consume_token(DIV);
                                                          NodoDiv jjtn002 = new NodoDiv(JJTDIV);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte002) {
                                                          if (jjtc002) {
                                                            jjtree.clearNodeScope(jjtn002);
                                                            jjtc002 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte002 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte002;}
                                                          }
                                                          if (jjte002 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte002;}
                                                          }
                                                          {if (true) throw (Error)jjte002;}
        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                            jjtn002.jjtSetLastToken(getToken(0));
                                                          }
        }
        break;
      case MOD:
        jj_consume_token(MOD);
                                                          NodoMod jjtn003 = new NodoMod(JJTMOD);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                          jjtn003.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte003) {
                                                          if (jjtc003) {
                                                            jjtree.clearNodeScope(jjtn003);
                                                            jjtc003 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte003 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte003;}
                                                          }
                                                          if (jjte003 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte003;}
                                                          }
                                                          {if (true) throw (Error)jjte003;}
        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                            jjtn003.jjtSetLastToken(getToken(0));
                                                          }
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_unaria() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
              NodoUnaryAdd jjtn001 = new NodoUnaryAdd(JJTUNARYADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
              }
        }
        break;
      case SUB:
        jj_consume_token(SUB);
                  NodoUnarySub jjtn002 = new NodoUnarySub(JJTUNARYSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PLUS_PLUS:
      expresion_pre_inc();
      break;
    case SUB_SUB:
      expresion_pre_dec();
      break;
    case NEW:
    case SUPER:
    case THIS:
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
    case PAR_A:
    case NOT:
    case COMP:
    case IDENTIFICADOR:
      expresion_unaria_dif();
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expresion_pre_inc() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PLUS_PLUS);
                NodoPlusPlus jjtn001 = new NodoPlusPlus(JJTPLUSPLUS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
    try {
      expresion_primaria();
    } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
    }
  }

  static final public void expresion_pre_dec() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(SUB_SUB);
              NodoSubSub jjtn001 = new NodoSubSub(JJTSUBSUB);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtn001.jjtSetFirstToken(getToken(1));
    try {
      expresion_primaria();
    } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
    } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
              }
    }
  }

  static final public void expresion_unaria_dif() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case COMP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMP:
        jj_consume_token(COMP);
               NodoComp jjtn001 = new NodoComp(JJTCOMP);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
        }
        break;
      case NOT:
        jj_consume_token(NOT);
                  NodoNot jjtn002 = new NodoNot(JJTNOT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          expresion_unaria();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_10(2147483647)) {
        expresion_cast();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case LITERAL_INTEGER:
        case LITERAL_FLOAT:
        case LITERAL_CARACTER:
        case LITERAL_STRING:
        case LITERAL_BOOLEAN:
        case LITERAL_NULL:
        case PAR_A:
        case IDENTIFICADOR:
          expresion_post();
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void look_cast() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_11(2)) {
      jj_consume_token(PAR_A);
      tipo_primitivo();
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(PAR_A);
      identificador();
      jj_consume_token(COR_A);
      jj_consume_token(COR_C);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
        jj_consume_token(PAR_A);
        identificador();
        jj_consume_token(PAR_C);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMP:
          jj_consume_token(COMP);
          break;
        case NOT:
          jj_consume_token(NOT);
          break;
        case PAR_A:
          jj_consume_token(PAR_A);
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case LITERAL_INTEGER:
        case LITERAL_FLOAT:
        case LITERAL_CARACTER:
        case LITERAL_STRING:
        case LITERAL_BOOLEAN:
        case LITERAL_NULL:
          literal();
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_post() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_primaria();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case SUB_SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        jj_consume_token(PLUS_PLUS);
        break;
      case SUB_SUB:
        jj_consume_token(SUB_SUB);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
  }

  static final public void expresion_cast() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_13(2)) {
      jj_consume_token(PAR_A);
      tipo_primitivo();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_29;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
      }
      jj_consume_token(PAR_C);
      expresion_unaria();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
        jj_consume_token(PAR_A);
        identificador();
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COR_A:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_30;
          }
          jj_consume_token(COR_A);
          jj_consume_token(COR_C);
        }
        jj_consume_token(PAR_C);
        expresion_unaria_dif();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresion_primaria() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    prefijo_primario();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
      case COR_A:
      case PUNTO:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_31;
      }
      sufijo_primario();
    }
  }

  static final public void prefijo_primario() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
      literal();
      break;
    case IDENTIFICADOR:
      identificador();
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(PUNTO);
      jj_consume_token(IDENTIFICADOR);
      break;
    case PAR_A:
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      break;
    case NEW:
      expresion_asignacion();
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sufijo_primario() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COR_A:
      jj_consume_token(COR_A);
      expresion();
      jj_consume_token(COR_C);
      break;
    case PUNTO:
      jj_consume_token(PUNTO);
      jj_consume_token(IDENTIFICADOR);
      break;
    case PAR_A:
      argumentos();
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void argumentos() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PAR_A);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
    case PAR_A:
    case ADD:
    case SUB:
    case PLUS_PLUS:
    case SUB_SUB:
    case NOT:
    case COMP:
    case IDENTIFICADOR:
      lista_argumentos();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
  }

  static final public void lista_argumentos() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMA);
      expresion();
    }
  }

  static final public void expresion_asignacion() throws ParseException {
 /*@bgen(jjtree) expresion_asignacion */
  Nodoexpresion_asignacion jjtn000 = new Nodoexpresion_asignacion(JJTEXPRESION_ASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      if (jj_2_14(2)) {
        jj_consume_token(NEW);
        tipo_primitivo();
        dimensiones_array();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          identificador();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PAR_A:
            argumentos();
            break;
          case COR_A:
            dimensiones_array();
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void dimensiones_array() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_33:
    while (true) {
      jj_consume_token(COR_A);
      expresion();
      jj_consume_token(COR_C);
      if (jj_2_15(2)) {
        ;
      } else {
        break label_33;
      }
    }
    label_34:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_34;
      }
      jj_consume_token(COR_A);
      jj_consume_token(COR_C);
    }
  }

  static final public void sentencia() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_17(2)) {
      sentencia_etiqueta();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVE_A:
        bloque();
        break;
      case PYC:
        sentencia_vacia();
        break;
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        expresion_sentencia();
        jj_consume_token(PYC);
        break;
      case SWITCH:
        sentencia_switch();
        break;
      case IF:
        sentencia_if();
        break;
      case WHILE:
        sentencia_while();
        break;
      case DO:
        sentencia_do();
        break;
      case FOR:
        sentencia_for();
        break;
      case BREAK:
        sentencia_break();
        break;
      case CONTINUE:
        sentencia_continue();
        break;
      case RETURN:
        sentencia_return();
        break;
      case THROW:
        sentencia_throw();
        break;
      case SYNCHRONIZED:
        sentencia_synchronized();
        break;
      case TRY:
        sentencia_try();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void sentencia_etiqueta() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PYP);
    sentencia();
  }

  static final public void bloque() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    gestorTS.nuevoAmbito();
    jj_consume_token(LLAVE_A);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_35;
      }
      sentencia_bloque();
    }
    jj_consume_token(LLAVE_C);
    gestorTS.cierraAmbito();
  }

  static final public void sentencia_bloque() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_18(2147483647)) {
      declaracion_variable_local();
      jj_consume_token(PYC);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case RETURN:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sentencia();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void declaracion_variable_local() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    tipo();
    declarador_variable();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMA);
      declarador_variable();
    }
  }

  static final public void sentencia_vacia() throws ParseException {
 /*@bgen(jjtree) sentencia_vacia */
  Nodosentencia_vacia jjtn000 = new Nodosentencia_vacia(JJTSENTENCIA_VACIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(PYC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void expresion_sentencia() throws ParseException {
 /*@bgen(jjtree) expresion_sentencia */
  Nodoexpresion_sentencia jjtn000 = new Nodoexpresion_sentencia(JJTEXPRESION_SENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        expresion_pre_inc();
        break;
      case SUB_SUB:
        expresion_pre_dec();
        break;
      default:
        jj_la1[86] = jj_gen;
        if (jj_2_19(2147483647)) {
          asignacion();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case SUPER:
          case THIS:
          case LITERAL_INTEGER:
          case LITERAL_FLOAT:
          case LITERAL_CARACTER:
          case LITERAL_STRING:
          case LITERAL_BOOLEAN:
          case LITERAL_NULL:
          case PAR_A:
          case IDENTIFICADOR:
            expresion_post();
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_switch() throws ParseException {
 /*@bgen(jjtree) sentencia_switch */
  Nodosentencia_switch jjtn000 = new Nodosentencia_switch(JJTSENTENCIA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      jj_consume_token(LLAVE_A);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULT_PLG:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_37;
        }
        etiqueta_switch();
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BREAK:
          case CHAR:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRY:
          case WHILE:
          case LITERAL_INTEGER:
          case LITERAL_FLOAT:
          case LITERAL_CARACTER:
          case LITERAL_STRING:
          case LITERAL_BOOLEAN:
          case LITERAL_NULL:
          case PAR_A:
          case LLAVE_A:
          case PYC:
          case PLUS_PLUS:
          case SUB_SUB:
          case IDENTIFICADOR:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_38;
          }
          sentencia_bloque();
        }
      }
      jj_consume_token(LLAVE_C);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void etiqueta_switch() throws ParseException {
 /*@bgen(jjtree) etiqueta_switch */
  Nodoetiqueta_switch jjtn000 = new Nodoetiqueta_switch(JJTETIQUETA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        expresion();
        jj_consume_token(PYP);
        break;
      case DEFAULT_PLG:
        jj_consume_token(DEFAULT_PLG);
        jj_consume_token(PYP);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_if() throws ParseException {
 /*@bgen(jjtree) sentencia_if */
  Nodosentencia_if jjtn000 = new Nodosentencia_if(JJTSENTENCIA_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(IF);
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      sentencia();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        sentencia();
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_while() throws ParseException {
 /*@bgen(jjtree) sentencia_while */
  Nodosentencia_while jjtn000 = new Nodosentencia_while(JJTSENTENCIA_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      sentencia();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_do() throws ParseException {
 /*@bgen(jjtree) sentencia_do */
  Nodosentencia_do jjtn000 = new Nodosentencia_do(JJTSENTENCIA_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(DO);
      sentencia();
      jj_consume_token(WHILE);
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      jj_consume_token(PYC);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_for() throws ParseException {
 /*@bgen(jjtree) sentencia_for */
  Nodosentencia_for jjtn000 = new Nodosentencia_for(JJTSENTENCIA_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(FOR);
      jj_consume_token(PAR_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case SHORT:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        inicio_for();
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        expresion();
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        actualizar_for();
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(PAR_C);
      sentencia();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void lista_expresion_sentencia() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    expresion_sentencia();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMA);
      expresion_sentencia();
    }
  }

  static final public void inicio_for() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_20(2147483647)) {
      declaracion_variable_local();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        lista_expresion_sentencia();
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void actualizar_for() throws ParseException {
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    lista_expresion_sentencia();
  }

  static final public void sentencia_break() throws ParseException {
 /*@bgen(jjtree) sentencia_break */
  Nodosentencia_break jjtn000 = new Nodosentencia_break(JJTSENTENCIA_BREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_continue() throws ParseException {
 /*@bgen(jjtree) sentencia_continue */
  Nodosentencia_continue jjtn000 = new Nodosentencia_continue(JJTSENTENCIA_CONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_return() throws ParseException {
 /*@bgen(jjtree) sentencia_return */
  Nodosentencia_return jjtn000 = new Nodosentencia_return(JJTSENTENCIA_RETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        expresion();
        break;
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_throw() throws ParseException {
 /*@bgen(jjtree) sentencia_throw */
  Nodosentencia_throw jjtn000 = new Nodosentencia_throw(JJTSENTENCIA_THROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(THROW);
      expresion();
      jj_consume_token(PYC);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_synchronized() throws ParseException {
 /*@bgen(jjtree) sentencia_synchronized */
  Nodosentencia_synchronized jjtn000 = new Nodosentencia_synchronized(JJTSENTENCIA_SYNCHRONIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(PAR_A);
      expresion();
      jj_consume_token(PAR_C);
      bloque();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void sentencia_try() throws ParseException {
 /*@bgen(jjtree) sentencia_try */
  Nodosentencia_try jjtn000 = new Nodosentencia_try(JJTSENTENCIA_TRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(TRY);
      bloque();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_40;
        }
        jj_consume_token(CATCH);
        jj_consume_token(PAR_A);
        parametro_formal();
        jj_consume_token(PAR_C);
        bloque();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        bloque();
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_3R_110() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_scan_token(OR_B)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(PREG)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(PYP)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(LLAVE_A)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PYP)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_51()) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(PAR_A)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_74()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(LLAVE_A)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PAR_C)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PAR_C)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(COR_A)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(PAR_C)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(COMP)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_57()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(SUB_SUB)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(DESP_DNS)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_scan_token(DESP_D)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(MAYOR_EQ)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(MENOR_EQ)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(MAYOR)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(DESP_I)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  static private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(N_IGUAL)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(MENOR)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_114()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_scan_token(AND_B)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[102];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x4020800,0x0,0x10411000,0x0,0x10411000,0x800,0x10411000,0x0,0x4000800,0x4000800,0x2000000,0x0,0x14411800,0x14411000,0x4000800,0x4000800,0x800,0x800,0x2000000,0x14411800,0x14411000,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000800,0x4000800,0x0,0x0,0x0,0x0,0x10411000,0x0,0x0,0x0,0xb0693000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0282000,0xb0693000,0xa0282000,0x0,0x0,0x0,0x104000,0xb0693000,0x104000,0x800000,0x10411000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x2,0x0,0x410,0xf4000000,0x1028,0x0,0x1028,0x410,0x201028,0x0,0x400,0x400,0x0,0x1,0x613728,0x403728,0x12700,0x12700,0x400,0x400,0x0,0x613728,0x403728,0x402700,0x402700,0x0,0x0,0x0,0xf4024040,0x0,0xf4024040,0x12700,0x12700,0x80000,0x0,0x0,0x0,0x1028,0x700,0x700,0x80000,0xf497d868,0x24000,0xf4024040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4024040,0x0,0x0,0xf4024040,0xf4024040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4024040,0x0,0xf4024040,0x0,0x0,0x40,0xf497c840,0xf497d868,0xf497c840,0x0,0x0,0xf4024040,0x0,0xf497d868,0x0,0x0,0xf4025068,0xf4024040,0xf4024040,0x0,0xf4024040,0x0,0x0,0xf4024040,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x200,0x80,0x1,0x0,0x20,0x0,0x80,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x20,0x38c0000b,0x100,0x38c0000b,0x0,0x0,0x0,0x88,0x20,0x100,0x0,0x0,0x0,0x0,0x1800008b,0x0,0x38c00003,0xc0000000,0x800,0x1000,0x2000,0x4000,0x0,0x8000,0x30000,0x30000,0x0,0x3c0000,0x3c0000,0x0,0x0,0xc00000,0xc00000,0x7000000,0x7000000,0xc00000,0x38c00003,0x20000000,0x20000000,0x3,0x20000003,0x2,0x18000000,0x18000000,0x20,0x20,0x2,0x222,0x3,0x222,0x38c00003,0x100,0x22,0x0,0x1800008b,0x1800008b,0x1800008b,0x100,0x18000000,0x3,0x0,0x1800008b,0x0,0x0,0x18000003,0x38c00003,0x18000003,0x100,0x18000003,0x0,0x0,0x38c00003,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x0,0x0,0x20,0x0,0xc00,0x0,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x800,0x0,0xc00,0x3f,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x1c0,0x1c0,0x0,0x0,0x0,0x0,0x0,0xc00,0x400,0x400,0x800,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0xc00,0x0,0x0,0x0,0x800,0x800,0x800,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x800,0xc00,0x800,0x0,0x800,0x800,0x800,0xc00,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[20];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[109];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 102; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 109; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
