
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Comienzo del programa
Prueba:
		;colocamos el puntero de pila en la cima de la memoria
		MOVE #65535, .SP
		;reservamos el espacio para variables globales de clase en la pila
		SUB .SP, #5
		MOVE .A, .SP
		;guardamos en .IY el puntero a pila, para tener controladas las variables globales
		MOVE .SP, .IY
		;guardamos tambien en .IX el puntero a pila, para tener controlado siempre SP en las recursiones
		MOVE .SP, .IX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				MOVE #1, .R0				;r0 contiene tmp0
				MOVE .R0, #5[.IY]				;r0 contiene tmp0
				MOVE #2, .R0				;r0 contiene tmp1
				MOVE .R0, #3[.IY]				;r0 contiene tmp1
				MOVE #3, .R0				;r0 contiene tmp2
				MOVE .R0, #4[.IY]				;r0 contiene tmp2
				MOVE #4, .R0				;r0 contiene tmp3
				MOVE .R0, #1[.IY]				;r0 contiene tmp3
				MOVE #5, .R0				;r0 contiene tmp4
				MOVE .R0, #2[.IY]				;r0 contiene tmp4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Comienzo del ámbito main
main:
		;guardamos los registros en pila
		PUSH .IX
		PUSH .R0
		PUSH .R1
		PUSH .R2
		PUSH .R3
		PUSH .R4
		PUSH .R5
		PUSH .R6
		PUSH .R7
		PUSH .R8
		PUSH .R9
		;reservamos el espacio para variables locales en la pila
		SUB .SP, #11
		MOVE .A, .SP
		;.IX apunta todavía al anterior marco de pila, lo usamos para rescatar los parámetros
		;guardamos en .IX el puntero a pila, para usar este registro como índice de este método
		MOVE .SP, .IX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Return del metodo main
		;liberamos el espacio para variables locales de la pila
		ADD .SP, #11
		MOVE .A, .SP
		;cargamos los registros de la pila
		POP .R9
		POP .R8
		POP .R7
		POP .R6
		POP .R5
		POP .R4
		POP .R3
		POP .R2
		POP .R1
		POP .R0
		POP .IX
		;liberamos el espacio de los parametros de la llamada
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		;liberamos el espacio para variables locales de la pila
		ADD .SP, #10
		MOVE .A, .SP

		;Fin de la ejecución.
		HALT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Comienzo del ámbito llamada1
llamada1:
		;guardamos los registros en pila
		PUSH .IX
		PUSH .R0
		PUSH .R1
		PUSH .R2
		PUSH .R3
		PUSH .R4
		PUSH .R5
		PUSH .R6
		PUSH .R7
		PUSH .R8
		PUSH .R9
		;reservamos el espacio para variables locales en la pila
		SUB .SP, #3
		MOVE .A, .SP
		;.IX apunta todavía al anterior marco de pila, lo usamos para rescatar los parámetros
		;guardamos en .IX el puntero a pila, para usar este registro como índice de este método
		MOVE .SP, .IX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				MOVE #0, .R0				;r0 contiene tmp8
				MOVE .R0, #1[.IX]				;r0 contiene tmp8

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Return del metodo llamada1
		;liberamos el espacio para variables locales de la pila
		ADD .SP, #3
		MOVE .A, .SP
		;cargamos los registros de la pila
		POP .R9
		POP .R8
		POP .R7
		POP .R6
		POP .R5
		POP .R4
		POP .R3
		POP .R2
		POP .R1
		POP .R0
		POP .IX
		;liberamos el espacio de los parametros de la llamada
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Comienzo del ámbito llamada2
llamada2:
		;guardamos los registros en pila
		PUSH .IX
		PUSH .R0
		PUSH .R1
		PUSH .R2
		PUSH .R3
		PUSH .R4
		PUSH .R5
		PUSH .R6
		PUSH .R7
		PUSH .R8
		PUSH .R9
		;reservamos el espacio para variables locales en la pila
		SUB .SP, #2
		MOVE .A, .SP
		;.IX apunta todavía al anterior marco de pila, lo usamos para rescatar los parámetros
		;guardamos en .IX el puntero a pila, para usar este registro como índice de este método
		MOVE .SP, .IX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				MOVE #0, .R0				;r0 contiene tmp10
				MOVE .R0, #1[.IX]				;r0 contiene tmp10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Return del metodo llamada2
		;liberamos el espacio para variables locales de la pila
		ADD .SP, #2
		MOVE .A, .SP
		;cargamos los registros de la pila
		POP .R9
		POP .R8
		POP .R7
		POP .R6
		POP .R5
		POP .R4
		POP .R3
		POP .R2
		POP .R1
		POP .R0
		POP .IX
		;liberamos el espacio de los parametros de la llamada
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

