
options {
  LOOKAHEAD = 1;
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = false;
  MULTI=true;
  NODE_EXTENDS="XNode";
  TRACK_TOKENS=true;
  NODE_PREFIX="Nodo";
  
}

PARSER_BEGIN(Compilador)
package javacc;

import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;

import tabla.simbolos.v2.CGestorTS;
import tabla.simbolos.v2.Atributos;
import interfaz.InterfazPlg;
import javacc.Simbolo;
import traductor.Traductor;

public class Compilador {
  public static CGestorTS gestorTS;
  public static boolean usaInterfaz = false;
  public static java.io.DataOutputStream fichero;

  public static CGestorTS gestorTSIntermedia;

  public static Traductor traductor;
  
  public static void main ( String args [] ) {

      //Inicialización del analizador
      Compilador compilador;
      usaInterfaz = false;
      initGestorTS();
    	
      if(args.length == 0){

        System.out.println ("Compilador: Leyendo de fichero ");
        try {
          compilador = new Compilador(new java.io.FileInputStream("ProgramaPrueba.java"));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero no ha sido encontrado.");
          return;
        }
      }
      else if(args.length == 1){
        System.out.println ("Compilador: Leyendo de fichero " + args[0] + " ..." );
        try {
          compilador = new Compilador(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("Compilador:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
	  try {
        fichero = new java.io.DataOutputStream( new java.io.FileOutputStream("ejemplos/ProgramaIntermedio.txt"));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println ("MAL, NO HAS CREADO EL FICHERO");
        return;
      }
      try {
        SimpleNode root = Compilador.compilar();
		Atributos.resetAliasCounter();
        root.dump("");
        System.out.println ("Compilador: La entrada ha sido leida con éxito.");
        jjtree.rootNode().interpret();

        //Codigo final
        traductor = new Traductor(gestorTS);
        traductor.traduce("ejemplos/ProgramaIntermedio.txt", "ejemplos/ProgramaFinal.txt");
        System.out.println("Traducido.");
        
      }
      catch(ParseException e){
        System.out.println ("Compilador: Ha ocurrido un error durante el análisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Compilador: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }

  public static void escribeFichero(String s)
    {
      try {
        fichero.writeUTF(s);
      }
      catch(IOException e) {
        System.out.println("No se ha escrito el fichero de código intermedio." + e.getMessage());
      }
    }

	public static void initGestorTS(){
		//Inicialización Tabla de Símbolos y Gestor de Ámbitos
	   gestorTS = new CGestorTS();
	   gestorTSIntermedia = new CGestorTS(); 
	}

	public Node rootNode() {
    return jjtree.rootNode();
  }

  public static int actualTmp=0, actualCase=0, actualIf=0, actualBucle=0, actualEtiq = 0;
  public static String nuevaTemp(){
    return "tmp"+(actualTmp++);
  }
  public static String nuevoCase(){
      return "case"+(++actualCase);
  }
  public static String nuevoIf(){
    return "if"+(actualIf);
  }
  public static String elseIf(){
    return "else-if"+(actualIf);
  }
  public static String finIf(){
    return "fin-if"+(actualIf++);
  }
  public static String nuevoBucle(){
    return "bucle"+(actualBucle);
  }
  public static String finBucle(){
    return "fin-bucle"+(actualBucle++);
  }
  public static String nuevaEtiq(){
    return "etiq"+(actualEtiq++);
  }
}


PARSER_END(Compilador)


/**	Elementos ignorados por el analizador
**	-Espacios en blanco
**	-Caracteres de escape
**	-Comentarios de una linea y comentarios multilinea
*/
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <  "//" (~ ["\n", "\r"])*  >
|  "/*":EntreComentarios 
}

<EntreComentarios> SKIP: 
{  
"*/" : DEFAULT 
} 
<EntreComentarios> MORE: 
{ 
   <~ [ ] > 
}


/** Elementos terminales:
**	-Letras
**	-Digitos
*/
TOKEN :
{
  < #DIGITO : [ "0"-"9" ] >
}

TOKEN :
{ 
  < #LETRA : [ "a" - "z", "A" - "Z" ] >
}


/** Tokens reconocidos por el analizador léxico(El orden importa)
**	-Identificador
**	-Palabra reservada
**	-Literal
**	-Delimitador
**	-Operador
*/


//PALABRAS RESERVADAS

TOKEN : {
  		<ABSTRACT: "abstract">  
		|  <BOOLEAN: "boolean">
		|  <BREAK: "break">
		|  <CASE: "case">
		|  <CATCH: "catch">
		|  <CHAR: "char">
		|  <CLASS: "class">
		|  <CONST: "const">
		|  <CONTINUE: "continue">
		|  <DEFAULT_PLG: "default">
		|  <DO: "do">
		|  <DOUBLE: "double">
		|  <ELSE: "else">
		|  <EXTENDS :"extends">
		|  <FINAL :"final">
		|  <FINALLY :"finally">
		|  <FLOAT :"float">
		|  <FOR :"for">
		|  <GOTO :"goto">
		|  <IF :"if">
		|  <IMPLEMENTS :"implements">
		|  <IMPORT :"import">
		|  <INSTANCEOF :"instanceof">
		|  <INT :"int">
		|  <INTERFACE :"interface">
		|  <LONG :"long">
		|  <NEW :"new">
		|  <PACKAGE :"package">
		|  <PRIVATE :"private">
		|  <PROTECTED :"protected">
		|  <PUBLIC :"public">
		|  <RETURN :"return">
		|  <SHORT :"short">
		|  <STATIC :"static">
		|  <SUPER :"super">
		|  <SWITCH :"switch">
		|  <SYNCHRONIZED :"synchronized">
		|  <THIS :"this">
		|  <THROW :"throw">
		|  <THROWS :"throws">
		|  <TRY :"try">
		|  <VOID :"void">
		|  <VOLATILE :"volatile">
		|  <WHILE :"while">
		/*|  <TRUE :"true">  Si esto se descomenta expresiones como b = true || false; dan errores sintacticos... estupidísimo.
		|  <FALSE :"false">*/
}


//LITERALES
TOKEN :
{
  < LITERAL_INTEGER:  (<DIGITO>)+ >
|
  < LITERAL_FLOAT: ( (<DIGITO>)+ <PUNTO> (<DIGITO>)+ ) >
|
  < LITERAL_CARACTER: ( "'" ~[  "\'" ] "'" ) >
|
  < LITERAL_STRING: ( "\"" (~[ "\"", "\n" ])* "\"" ) >
| 
  < LITERAL_BOOLEAN :  ( "true" | "false" ) >
| 
  < LITERAL_NULL :  "null" >
}


//DELIMITADORES
TOKEN : {
  < PAR_A : "(" > |
  < PAR_C : ")" > |
  < LLAVE_A : "{" > |
  < LLAVE_C : "}" > |
  < COR_A : "[" > |
  < COR_C : "]" > |
  < PYC : ";" > |
  < COMA : "," > |
  < PUNTO : "." > |
  < PYP : ":" > |
  < PREG : "?" >
}

 
//OPERADORES
TOKEN : {
  < OR : "||" > |
  < AND : "&&" > |
  < OR_B : "|" > |
  < AND_B : "&" > |
  < IGUAL_IGUAL : "==" > |
  < N_IGUAL : "!=" > |
  < MENOR : "<" > |
  < MAYOR : ">" > |
  < MENOR_EQ : "<=" > |
  < MAYOR_EQ : ">=" > |
  < ADD : "+" > |
  < SUB : "-" > |
  < MULT : "*" > |
  < DIV : "/" > |
  < MOD : "%" > |
  < PLUS_PLUS : "++" > |
  < SUB_SUB : "--" > |
  < NOT : "!" > |
  < ADD_E : "+=" > |
  < SUB_E : "-=" > |
  < MULT_E : "*=" > |
  < DIV_E : "/=" > |
  < MOD_E : "%=" > |
  < AND_E : "&=" > |
  < OR_E : "|=" > |
  < EQUALS : "=" > |
  < DESP_D : ">>" > |
  < DESP_I : "<<" > |
  < DESP_DNS : ">>>" > |
  < XOR : "^" > |
  < COMP : "~" >
}

//IDENTIFICADOR
TOKEN : {
	< IDENTIFICADOR : ( "_" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	| 	( <LETRA> ( <LETRA> | <DIGITO> | "_" | "$" )* ) 
	| 	( "$" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	>
}


SimpleNode compilar():
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  [ <PACKAGE> identificador() <PYC> ]
  ( <IMPORT> identificador() [ <PUNTO> <MULT> ] <PYC> )*
  ( declaracion_tipo() )*
  <EOF>
  {return jjtThis;}
}


/* Descomentar si se quiere volver a la version antigua sin comprobacion semántica de las funciones
void identificador() :
{
  Token t, t1 = null;
  String s = "";
  String restoTipo = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> t1=<IDENTIFICADOR> {restoTipo += "." + t1.image;} )*
  {
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtThis.value = t.image + restoTipo;

	//jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);
  }
}*/

Token identificador() :
{
  Token t, t1 = null;
  String restoTipo = "";
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> t1=<IDENTIFICADOR> {restoTipo += "." + t1.image;} )*
  {
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtThis.value = t.image + restoTipo;

	//jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);

    /* NECESITO ENVIAR ESTE STRING */
    s = t.image + restoTipo;
    return t;
  }
}

String literal() #void:
{
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  s = literal_integer()#LiteralInteger { return s; }
| s = literal_float() #LiteralFloat { return s; }
| s = literal_caracter() #LiteralCaracter { return s; }
| s = literal_string() #LiteralString { return s; }
| s = literal_boolean() #LiteralBoolean
	{	if (s == "true")
			return ""+1;
		else
			return ""+0;
	}
| s = literal_null() #LiteralNull { return s; }
}


String literal_integer() #void: 
{
  	Token t = new Token();
	if (usaInterfaz)
    	InterfazPlg.escribirAvisos();
    	
}
{
	t = <LITERAL_INTEGER> { return t.image; }
}

String literal_float() #void: 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_FLOAT> { return t.image; }
}

String literal_caracter() #void: 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_CARACTER> { return t.image; }
}

String literal_string() #void: 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_STRING> { return t.image; }
}

String literal_boolean() #void: 
{
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_BOOLEAN> { return t.image; }
}

String literal_null() #void: 
{
  Token t = new Token();
if (usaInterfaz)
    InterfazPlg.escribirAvisos();
}
{
    t = <LITERAL_NULL> { return t.image; }
}

/*
void tipo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( tipo_primitivo() | identificador() ) ( <COR_A> <COR_C> )*
}

*/

Token tipo() :
{
  String s = "";
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = tipo_primitivo() | t = identificador() ) ( <COR_A> <COR_C> 
    { s += '[' + ']'; }
  )* //FIXME Aun no se bien como coger los corchetes(a lo mejor ni es necesario), preguntar a Ricky
  {
    /* 
    NECESITO DEVOLVER EL STRING QUE ME VIENE DE TIPO_PRIMITIVO O DE IDENTIFICADOR 
    * s = tipo_primitivo | s = identificador
    * return s;
    */
    return t;
  }
  
}

/* Descomentar si se quiere volver a la version antigua sin comprobacion semántica de las funciones
void tipo_primitivo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  	(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})
    | <CHAR> { jjtThis.value = ConstantesTipos.CHAR;}
    | <SHORT> { jjtThis.value = ConstantesTipos.SHORT;}
    | <INT> { jjtThis.value = ConstantesTipos.INT;}
    | <LONG> { jjtThis.value = ConstantesTipos.LONG;}
    | <FLOAT> { jjtThis.value = ConstantesTipos.FLOAT;}
    | <DOUBLE> { jjtThis.value = ConstantesTipos.DOUBLE;}

}
*/

Token tipo_primitivo() :
{
  Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  	//t =(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})<-- CAMBIO MIO(Ricardo el más guay), no entiendo que diferencia hay si le quitas los parentesis
  	t =<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN; return t;}
    | t =<CHAR> { jjtThis.value = ConstantesTipos.CHAR; return t;}
    | t =<SHORT> { jjtThis.value = ConstantesTipos.SHORT; return t;}
    | t =<INT> { jjtThis.value = ConstantesTipos.INT; return t;}
    | t =<LONG> { jjtThis.value = ConstantesTipos.LONG; return t;}
    | t =<FLOAT> { jjtThis.value = ConstantesTipos.FLOAT; return t;}
    | t =<DOUBLE> { jjtThis.value = ConstantesTipos.DOUBLE; return t;} 
    
    /* 
    * NECESITO DEVOLVER LA IMAGEN DEL TOKEN
    * return t.image
    * en lugar de:
    * return t
    */
}


void declaracion_tipo() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( ( <ABSTRACT> | <FINAL> | <PUBLIC> )* <CLASS> ) sim = declaracion_clase() 
	{ escribeFichero(sim.codigo); }
|
  sim = declaracion_interface() 
	{ escribeFichero(sim.codigo); }
|
  <PYC> { escribeFichero(sim.codigo); }
}

Token tipo_metodo() :
{
  String s = "";
  Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t=tipo(){
    jjtThis.value = t.image;
    return t;
  }
  |
  t=<VOID>{
    jjtThis.value = t.image;
    return t;
  }
  /* NECESITO DEVOLER EL STRING QUE ME VIENE DE TIPO O "VOID"
  * s = tipo() return s;
  * en void:
  * return t.image
  */
}
 

String lista_de_tipos() #void:
{
  String s = "";
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = identificador()
  ( <COMA> t1 = identificador() { s = ',' + t1.image; } )*
  { return t.image + s; }
}

Simbolo declaracion_clase() #void:
{
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  String s4 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( <ABSTRACT> | <FINAL> | <PUBLIC> )*
  <CLASS> t1 = <IDENTIFICADOR> [ <EXTENDS> t = identificador() { s2 = "extends" + t.image; } ] [ <IMPLEMENTS> s1 = lista_de_tipos() { s3 = "implements" + s1; } ]
  <LLAVE_A> ( sim1 = declaracion_cuerpo_clase() { s4+=sim1.codigo; } )* <LLAVE_C>
  { sim.codigo = "\nclass " + t1.image + ":\n";
      sim.codigo += s4;
      return sim;
    }
}

Simbolo declaracion_cuerpo_clase() #void:
{
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  sim = inicializador_static()
  { return sim; }
|
  LOOKAHEAD( [ <PUBLIC> | <PROTECTED> | <PRIVATE> ] identificador() <PAR_A> )
  sim = declaracion_constructora()
  { return sim; }
|
  LOOKAHEAD( declaracionR_metodo() )
  sim = declaracion_metodo()
  { return sim; }
|
  sim = campo_declaracion()
  { return sim; }
}

Simbolo declaracionR_metodo() #void:
{
  Token t = new Token();
  Token t1 = new Token();
  Token t2 = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <ABSTRACT> | t = <FINAL> | t = <SYNCHRONIZED> )*
  t2 = tipo_metodo() t1 = <IDENTIFICADOR> <PAR_A>
    { sim.codigo = t.image + t2.image + t1.image;
      return sim;
    }
}

Simbolo declaracion_interface() #void:
{
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <ABSTRACT> | t = <PUBLIC> )*
  <INTERFACE> t1 = <IDENTIFICADOR> [ <EXTENDS> s2 = lista_de_tipos() {s1 = "extends" + s2;} ]
  <LLAVE_A> ( sim1 = declaracion_miembro_interface() {s3=sim1.codigo;} )* <LLAVE_C>
  { sim.codigo = t.image + "interface" + t1.image + s1 + '{' + s3 + '}';    
      return sim;
    }
}

Simbolo declaracion_miembro_interface() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( declaracionR_metodo() ) sim = declaracion_metodo() { return sim; }
|
  sim = campo_declaracion() 
  { sim.lugar = nuevaTemp();
    return sim; 
  }
}

Simbolo campo_declaracion() :
{
  Token t = new Token();
  Token t1 = new Token();
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <FINAL> | t = <VOLATILE> )*
  t1 = tipo() sim = declarador_variable() ( <COMA> sim1 = declarador_variable()  {sim.codigo += sim1.codigo;} )* <PYC> 
  { return sim; }
}

Simbolo declarador_variable() #void:
{
  String aux = "";
  Simbolo sim1 = new Simbolo();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = declarador_variable_id() 
    [ <EQUALS> sim1 = iniciar_variable() 
      {
        if (!sim1.lugar.equals("new"))
        {
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + sim1.lugar + "\n";
        }
      }
    ]
    { return sim; }
}

Simbolo declarador_variable_id() :
{
  Simbolo sim = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR>
  {
    
    jjtThis.value = t.image;

	String lexema = t.image;
	if(!gestorTSIntermedia.estaLexema(lexema))	{
	  	Atributos a = new Atributos(lexema,"");		gestorTSIntermedia.insertar(lexema, a);
		System.out.println("TS: Insertando ident: "+ lexema +" con alias " +a.getAlias());
  	}
  	else  	{		System.err.println("No se puede insertar el lexema: "+lexema);
  	}
    
	//Atributos atribs = new Atributos(jjtThis.name, jjtThis.pilaTipos.peek());
	//Compilador.gestorTS.insertar(jjtThis.name, atribs);
	//System.out.println("Identificador: "+ jjtThis.name + " con tipo "+jjtThis.pilaTipos.peek());
  } ( <COR_A> <COR_C> /*{ s = '[' + ']';}*/ )*
  {
    sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
    return sim;
  }
}

Simbolo iniciar_variable() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s ="";
  String s1 = "";
  String s2 = "";
  /*if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }*/
}
{
  <LLAVE_A> [ sim1 = iniciar_variable() ( LOOKAHEAD(2) <COMA> sim2 = iniciar_variable() { s = ',' + s; } )* ] [ <COMA> { s2 = ',' + "";} ] <LLAVE_C>
  { return sim; }
|
  sim = expresion() { return sim; }
}

Simbolo declaracion_metodo() :
{
  Token t = new Token();
  Token t1 = new Token();
  String s ="";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> | t = <STATIC> | t = <ABSTRACT> | t = <FINAL> | t = <SYNCHRONIZED> )*
  t1 = tipo_metodo() sim = declarador_metodo() [ <THROWS> s1 = lista_de_tipos() {s2 = "throws" + s1;} ]
  ( sim1 = bloque() | <PYC> )
    {
      if(t1.image=="void") {
        sim.codigo += sim1.codigo + "&return\n";
          return sim;
        }
        else {
          sim.codigo += sim1.codigo;
          return sim;
        }
    }
}

Simbolo declarador_metodo() :
{
  Token t = new Token();
  String s = "";
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR> sim = parametros_formales() ( <COR_A> <COR_C> {s = '[' + ']' + "";} )*
  {
    jjtThis.value = t.image;
    sim.codigo = "&" + t.image +":\n";
    return sim;
  }
}

Simbolo parametros_formales() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PAR_A> [ sim1 = parametro_formal() ( <COMA> sim2 = parametro_formal() {s = ',' + sim2.codigo;} )* ] <PAR_C>
  {   
    sim.lugar = nuevaTemp();
    sim.codigo = '(' + sim1.codigo + s + ')';
    return sim;
  }
}

Simbolo parametro_formal() #void:
{
  String s = "";
  String s1 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = tipo() sim1 = declarador_variable_id()
  { 
    sim.codigo = s + sim1.codigo;
    return sim; 
  }
}

Simbolo declaracion_constructora() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s ="";
  String s1 = "";
  Token t = new Token();
  Token t1;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  [ t = <PUBLIC> | t = <PROTECTED> | t = <PRIVATE> ]
  t1 = <IDENTIFICADOR> sim1 = parametros_formales() [ <THROWS> s1 = lista_de_tipos() {s1 = "throws" + s1;} ]
  <LLAVE_A> [ LOOKAHEAD(2) sim2 = const_explic() ] ( sim3 = sentencia_bloque() )* <LLAVE_C>
  { 
    sim.lugar = nuevaTemp();
    sim.codigo = t.image + t1.image + sim1.codigo + s1 + '{' + sim2.codigo + sim3.codigo + '}';
    return sim;
  }
}

Simbolo const_explic() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <THIS> sim = argumentos() <PYC> //TODO
  { 
    sim.codigo += "this" + sim.codigo + ';';
    return sim;
  }
|
  <SUPER> sim = argumentos() <PYC> //TODO
  { 
    sim.codigo += "super" + sim.codigo + ';';
    return sim;
  }
}

Simbolo inicializador_static() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <STATIC> sim = bloque()
  { 
    sim.codigo += "static" + sim.codigo;
    return sim;
  }
}

Simbolo expresion() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  sim = asignacion() { return sim; }
|
  sim = expresion_cond() { return sim; }
}

Simbolo asignacion() #asignacion(2):
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String t = "";
  String aux = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
   sim1 = expresion_primaria()
  t = operador_asignacion()
  sim2 = expresion()
  { sim.lugar = sim1.lugar;
    sim.codigo = sim1.codigo;
  if (t == "=")
    {
      if (sim2.comienzo == "post"){
        sim.codigo += sim2.codigo;
        sim.codigo += sim.lugar + ":=" + sim2.lugar + "\n";
	    sim.codigo += sim2.verdadera;
      }
	  else{
	    sim.codigo += sim2.codigo;
	    sim.codigo += sim.lugar + ":=" + sim2.lugar + "\n";
      }
    }
    else
    {
      if (sim2.comienzo == "post")
      {
		aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\n";
		sim.codigo += sim1.lugar + ":=" + aux + "\n";
	    sim.codigo += sim2.verdadera;
      }
      else
      {
        aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\n";
        sim.codigo += sim1.lugar + ":=" + aux + "\n";
      }
    }
    return sim;
  }
}

String operador_asignacion() #void :
{
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <EQUALS> { return "="; }
| t = <MULT_E> { return "*"; }
| t = <DIV_E> { return "/"; }
| t = <MOD_E> { return "%"; }
| t = <ADD_E> { return "+"; }
| t = <SUB_E> { return "-"; }
| t = <AND_E> { return "&"; }
| t = <OR_E> { return "|"; }
}

Simbolo expresion_cond() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_cond_or() [ <PREG>
  sim1 = expresion() <PYP>
  sim2 = expresion_cond()
  {
    sim.codigo+= sim1.codigo + sim2.codigo;
  }]
  { return sim; }
}

Simbolo expresion_cond_or() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_cond_and()
  ( t = <OR>
    sim1 = expresion_cond_and() #Or(2)
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.comienzo = nuevoIf();
      sim.falsa = elseIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 1" + ") goto " + sim.comienzo + "\n";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += sim.comienzo + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += "goto " + sim.siguiente + "\n";
      sim.codigo += sim.falsa + ":\n" + sim.lugar + ":=0\n";
      sim.codigo += sim.siguiente + ":\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_cond_and() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_or_bin()
  ( t = <AND>
    sim1 = expresion_or_bin() #And(2)
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.falsa = elseIf();
      sim.comienzo = nuevoIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\n";
      sim.codigo += sim.lugar + ":=1\n";
      sim.codigo += "goto " + sim.siguiente + "\n";
      sim.codigo += sim.falsa + ":\n" + sim.lugar + ":=0\n";
      sim.codigo += sim.siguiente + ":\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_or_bin() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_xor()
  ( t = <OR_B>
    sim1 = expresion_xor()  #BOr(2)
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_xor() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_and_bin()
  ( t = <XOR>
    sim1 = expresion_and_bin() #XOr(2)
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_and_bin() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_equal()
  ( t = <AND_B>
    sim1 = expresion_equal() #BAnd(2)
    {
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
    }
  )*
  { return sim; }
}

Simbolo expresion_equal() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_instanceof()
  ( ( t = <IGUAL_IGUAL>
      sim1 = expresion_instanceof() #IgualIgual(2)
      {
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += "if (" + s + "=" + sim1.lugar + ") goto " + s1 + "\n";
        sim.codigo += sim.lugar + ":=0\n";
        sim.codigo += "goto " + s2 + "\n";
        sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
        sim.codigo += s2 + ":\n";
      }
 |  t = <N_IGUAL>
    sim1 = expresion_instanceof() #NIgual(2)
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + "!=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
    )
  )*
 { return sim; }
}

Simbolo expresion_instanceof() #void:
{
  Simbolo sim = new Simbolo();
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_relacional() [ t = <INSTANCEOF> t1 = tipo() #expresion_instanceof
    { sim.codigo += t.image + t1.image; }
  ]
  { return sim; }
}

Simbolo expresion_relacional() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_shift() 
  ( ( t = <MENOR> sim1 = expresion_shift() #Menor(2)
      {
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += "if (" + s + "<" + sim1.lugar + ") goto " + s1 + "\n";
        sim.codigo += sim.lugar + ":=0\n";
        sim.codigo += "goto " + s2 + "\n";
        sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
        sim.codigo += s2 + ":\n";
      }
  | t = <MAYOR> sim1 = expresion_shift() #Mayor(2)
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + ">" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
  | t = <MENOR_EQ> sim1 = expresion_shift() #MenorEq(2)
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + "<=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
  | t = <MAYOR_EQ> sim1 = expresion_shift() #MayorEq(2)
    {
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + ">=" + sim1.lugar + ") goto " + s1 + "\n";
      sim.codigo += sim.lugar + ":=0\n";
      sim.codigo += "goto " + s2 + "\n";
      sim.codigo += s1 + ":\n" + sim.lugar + ":=1\n";
      sim.codigo += s2 + ":\n";
      }
    )
  )*
  { return sim; }
}

Simbolo expresion_shift() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_add() 
  ( ( t = <DESP_I> sim1 = expresion_add() #DespI(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DESP_D> sim1 = expresion_add() #DespD(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DESP_DNS> sim1 = expresion_add() #DespDNS(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      } 
    )
  )*
  { return sim; }
}

Simbolo expresion_add() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_mult() ( ( t = <ADD> sim1 = expresion_mult() #Add(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <SUB> sim1 = expresion_mult() #Sub(2)
      {
          aux = sim.lugar;
          sim.lugar = nuevaTemp();
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
        }
    )
  )*
  { return sim; }
}

Simbolo expresion_mult() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_unaria() 
  ( ( t = <MULT> sim1 = expresion_unaria() #Mult(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <DIV> sim1 = expresion_unaria() #Div(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    | t = <MOD> sim1 = expresion_unaria() #Mod(2)
      {
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\n";
      }
    )
  )*
  { return sim; }
}

Simbolo expresion_unaria() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  (   t = <ADD> sim = expresion_unaria() #UnaryAdd
      { return sim; }
    | t = <SUB> sim1 = expresion_unaria() #UnarySub
      {
        sim.lugar = nuevaTemp();
        sim.codigo = sim1.codigo;
        sim.codigo += "-" + sim1.lugar + "\n";
        return sim;
      }
  ) 
|
  sim = expresion_pre_inc() { return sim; }
|
  sim = expresion_pre_dec() { return sim; }
|
  sim = expresion_unaria_dif() { return sim; }
}

Simbolo expresion_pre_inc() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <PLUS_PLUS> sim = expresion_primaria() #PlusPlus
  {
    sim.codigo += sim.lugar + ":=" + "++" + "\n";
    return sim;
  }
}

Simbolo expresion_pre_dec() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <SUB_SUB> sim = expresion_primaria() #SubSub
  {
    sim.codigo += sim.lugar + ":=" + "--" + "\n";
    return sim;
  }
}

Simbolo expresion_unaria_dif() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  (   t = <COMP> sim1 = expresion_unaria() #Comp
      {
        sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ~" + sim1.lugar + "\n";
      return sim;
      }
    | t = <NOT> sim1 = expresion_unaria() #Not
      {
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ! " + sim1.lugar + "\n";
        return sim;
      }
  ) 
|
  LOOKAHEAD( look_cast() )
  sim = expresion_cast() { return sim; }
|
  sim = expresion_post() { return sim; }
}

String look_cast() #void:
{
  String s, s1;
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  <PAR_A> t=tipo_primitivo() {return '(' + t.image;}
|
  LOOKAHEAD(<PAR_A> identificador() <COR_A>)
  <PAR_A> t=identificador() <COR_A> <COR_C> {return '(' + t.image + '[' + ']';}
|
  <PAR_A> t=identificador() <PAR_C>
  (
    <COMP> {return '(' + t.image + ')' + '~';}
    | <NOT> {return '(' + t.image + ')' + "not" ;}
    | <PAR_A> {return '(' + t.image + ')' + '(';}
    | t1=<IDENTIFICADOR> {return '(' + t.image + ')' + t1.image;}
    | <THIS> {return '(' + t.image + ')' + "this";}
    | <SUPER> {return '(' + t.image + ')' + "super";}
    | <NEW> {return '(' + t.image + ')' + "new";}
    | s1=literal() {return '(' + t.image + ')' + s1;}
  )
}

Simbolo expresion_post() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_primaria()
  [ t=<PLUS_PLUS> {s = t.image;}
    {    
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "++" + "\n";
    }
  | t=<SUB_SUB> {s = t.image;} 
    {
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "--" + "\n";
    }
  ]
  { //sim.codigo += sim.verdadera; 
    return sim; }
}

Simbolo expresion_cast() #void:
{
  String s = "";
  String s2 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  <PAR_A> t=tipo_primitivo() ( <COR_A> <COR_C> {s2 += '[' + ']';} )* <PAR_C> sim1=expresion_unaria()
    { 
      sim.lugar = nuevaTemp();
      sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
      return sim;
    }
|
  <PAR_A> t=identificador() ( <COR_A> <COR_C> {s2 += '[' + ']';} )* <PAR_C> sim1=expresion_unaria_dif()
      { 
        sim.lugar = nuevaTemp();
        sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
        return sim;
      }
}

Simbolo expresion_primaria() #void:
{
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim = new Simbolo();
  String aux = "";
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim1 = prefijo_primario()
  ( sim2 = sufijo_primario()
    {
      if (sim2.verdadera.equals("argumentos"))      {        sim2.codigo +="call " + sim1.lugar + ", " + sim2.comienzo + "\n";
      }
      else
      {
		s += sim2.lugar;
		s1 += sim2.codigo;
		sim2.lugar = s;
		sim2.codigo = s1;
      } 
    }
  )*
  {
    sim.lugar = sim1.lugar + sim2.lugar;
    sim.codigo = sim1.codigo + sim2.codigo;
    System.out.println("EXPRESION_PRIMARIA\t" + sim.codigo);
    return sim;
  }
}

Simbolo prefijo_primario() #void:
{
  Simbolo sim = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  s = literal()
  {
    sim.lugar = nuevaTemp();
    sim.codigo = sim.lugar + ":=" + s + "\n";
    return sim;
  }
|
  t = identificador()
  {
	if (gestorTSIntermedia.estaLexema(t.image))
		sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
	else
		sim.lugar = t.image;
    //sim.lugar = t.image;
    sim.codigo = "";
    return sim;
  }
|
  t = <THIS>
  {
    s = t.image;
    //TODO
    return sim;
  }
|
  <SUPER> <PUNTO> t = <IDENTIFICADOR>
  {
    //TODO
    return sim;
  }
|
  <PAR_A> sim = expresion() <PAR_C> { return sim; }
|
  sim = expresion_asignacion_array() { return sim; }  
}

Simbolo sufijo_primario() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <COR_A> sim1 = expresion() <COR_C>
  {
    sim.lugar = "[" + sim1.lugar+ "]";
    sim.codigo = sim1.codigo;
    return sim;
  }
|
  <PUNTO> t = <IDENTIFICADOR>
  {
    sim.lugar = "." + t.image;
    return sim;
  }
|
  sim = argumentos() { return sim; }
}

Simbolo argumentos() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PAR_A> [ sim = lista_argumentos() ] <PAR_C> { return sim; }
}

Simbolo lista_argumentos() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s;
  int numeroarg = 0;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim1 = expresion()
  { 
    sim.codigo = sim1.codigo;
    s = "param " + sim1.lugar + "\n";
    numeroarg++;
  }
  ( <COMA> sim2 = expresion()
    { 
    sim.codigo += sim2.codigo;
    s += "param " + sim2.lugar + "\n";
    numeroarg++;
    }
  )*
  {
    sim.verdadera = "argumentos"; //FIXME es una cutrada
    sim.comienzo = "" + numeroarg;
    sim.codigo += s;
    return sim;
  }
}

Simbolo expresion_asignacion_array() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  <NEW> t=tipo_primitivo() sim1=dimensiones_array()
  {
    sim.lugar = "new";
    return sim;
  }
|
  <NEW> t=identificador() ( sim1=argumentos() | sim1=dimensiones_array() )
  {
    sim.lugar = "new";
    return sim;
  }
}

Simbolo dimensiones_array() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( LOOKAHEAD(2) <COR_A> sim1=expresion() <COR_C>
    { 
      sim.codigo = sim1.codigo;
      sim.codigo += '[' + sim1.lugar + ']'; 
    }
  )+
  ( LOOKAHEAD(2) <COR_A> <COR_C>
    { sim.codigo += '[' + ']'; }
  )*
  { return sim; }
}

Simbolo sentencia() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(2)
  sim = sentencia_etiqueta() { return sim; }
|
  sim = bloque() { return sim; }
|
  sim = sentencia_vacia() { return sim; }
|
  sim = expresion_sentencia() <PYC> { sim.codigo += sim.verdadera; return sim; }
|
  sim = sentencia_switch() { return sim; }
|
  sim = sentencia_if() { return sim; }
|
  sim = sentencia_while() { return sim; }
|
  sim = sentencia_do() { return sim; }
|
  sim = sentencia_for() { return sim; }
|
  sim = sentencia_break() { return sim; }
|
  sim = sentencia_continue() { return sim; }
|
  sim = sentencia_return() { return sim; }
|
  sim = sentencia_throw() { return sim; }
|
  sim = sentencia_synchronized() { return sim; }
|
  sim = sentencia_try() { return sim; }
}

Simbolo sentencia_etiqueta() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <IDENTIFICADOR> <PYP> sim1 = sentencia()
  { return sim; }
}

Simbolo bloque() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  { gestorTSIntermedia.nuevoAmbito(""); }
  <LLAVE_A> ( sim1 = sentencia_bloque(){sim.codigo += sim1.codigo;})* <LLAVE_C>
  { gestorTSIntermedia.cierraAmbito();  }
  { return sim; }
}

Simbolo sentencia_bloque() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD(tipo() <IDENTIFICADOR>)
  sim = declaracion_variable_local() <PYC> { return sim; }
|
  sim = sentencia() { return sim; }
}

Simbolo declaracion_variable_local() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = tipo() sim = declarador_variable() ( <COMA> sim1 = declarador_variable() )*
  { return sim; }
}

Simbolo sentencia_vacia() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <PYC>
  { return sim; }
}

Simbolo expresion_sentencia() :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_pre_inc() { return sim; }
|
  sim = expresion_pre_dec() { return sim; }
|
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  sim = asignacion()
  { return sim; }
|
  sim = expresion_post() { return sim; }
}

Simbolo sentencia_switch() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  String s1 = "";
  String s2 = "";
  String etiqCase = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  /*TODO*/
  <SWITCH> <PAR_A> sim3 = expresion() <PAR_C> <LLAVE_A>
  {
    sim.comienzo = nuevoIf();
    sim.siguiente = finIf();
    etiqCase = nuevoCase(); //hacer
    sim.codigo = sim.comienzo + ":\n";
  }
    ( sim1 = etiqueta_switch()
      { sim4 = new Simbolo(); }
        ( sim2 = sentencia_bloque()
          { sim4.codigo += sim2.codigo; }
        )*
          {
            if (sim1.lugar != "default")
              {
                s1 = nuevaEtiq();
                s2 = nuevaEtiq();
                sim.codigo += sim1.codigo;
                sim.codigo += "if (" + sim3.lugar + "=" + sim1.lugar + ") goto " + s1 + "\n";
                sim.codigo += sim1.lugar + ":=0\n";
                sim.codigo += "goto " + s2 + "\n";
                sim.codigo += s1 + ":\n" + sim1.lugar + ":=1\n";
                sim.codigo += s2 + ":\nif (" + sim1.lugar + "=0) goto " + etiqCase + "\n";
                sim.codigo += sim4.codigo;
                
                if (sim2.lugar == "break")
                  sim.codigo += "goto " + sim.siguiente +"\n";
              
                sim.codigo += etiqCase + ":\n";
                etiqCase = nuevoCase();
              }
            else
              { sim.codigo += sim4.codigo; }
          }
    )*
   { sim.codigo += sim.siguiente + ":\n"; }
  <LLAVE_C>
  { return sim; }
}

Simbolo etiqueta_switch() :
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <CASE> sim = expresion() <PYP>
  { return sim; }
|
  <DEFAULT_PLG> <PYP>
  { sim.lugar = "default";
    return sim; }
}

Simbolo sentencia_if() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Boolean hayelse = false;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <IF> <PAR_A> sim1 = expresion() <PAR_C> sim2 = sentencia()
  [ LOOKAHEAD(1) <ELSE> sim3 = sentencia() { hayelse = true; } ]
  { 
    sim.comienzo = nuevoIf();
    if (hayelse) sim.falsa = elseIf();
    sim.siguiente = finIf();
    sim.codigo = sim1.codigo;
    if (hayelse)
      {
        sim.codigo += "goto " + sim.comienzo + "\n";
        sim.codigo += sim.comienzo + ":\n";
        sim.codigo += "if (" + sim1.lugar + "=0) goto " + sim.falsa + "\n";
        sim.codigo += sim2.codigo;
        sim.codigo += "goto " + sim.siguiente + "\n";
        sim.codigo += sim.falsa + ":\n";
        sim.codigo += sim3.codigo;
        sim.codigo += sim.siguiente + ":\n";
      }
    else
      {
        System.out.println("IF\t" + sim2.codigo);
        sim.codigo += "goto " + sim.comienzo + "\n";
        sim.codigo += sim.comienzo + ":\n" + "if (" + sim1.lugar + "=0) goto " + sim.siguiente + "\n";
        sim.codigo += sim2.codigo;
        sim.codigo += sim.siguiente + ": \n";
      }
    return sim;
  }
}

Simbolo sentencia_while() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <WHILE> <PAR_A> sim1 = expresion() <PAR_C> sim2=sentencia()
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\n";
    sim.codigo += sim1.codigo;
    sim.codigo += "if (" + sim1.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += sim2.codigo;
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";
    return sim;
  }
}

Simbolo sentencia_do() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <DO> sim1 = sentencia() <WHILE> <PAR_A> sim2 = expresion() <PAR_C> <PYC>
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\n";
    sim.codigo += sim1.codigo;
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";
    return sim;
  }
}

Simbolo sentencia_for() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <FOR> <PAR_A> [ sim1 = inicio_for() ] <PYC> [ sim2 = expresion() ] <PYC> [ sim3 = actualizar_for() ] <PAR_C> sim4 = sentencia()
  {
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim1.codigo;
    sim.codigo += sim.comienzo + ":\n";
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\n";
    sim.codigo += sim4.codigo;
    sim.codigo += sim3.codigo;
    sim.codigo += "goto " + sim.comienzo + "\n";
    sim.codigo += sim.siguiente + ":\n";  
  return sim;
  }
}

Simbolo lista_expresion_sentencia() #void:
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = expresion_sentencia() ( <COMA> sim2 = expresion_sentencia() )*
  { return sim; }
}

Simbolo inicio_for() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  LOOKAHEAD( tipo() <IDENTIFICADOR> )
  sim = declaracion_variable_local()
  { return sim; }
|
  sim = lista_expresion_sentencia()
  { return sim; }
}

Simbolo actualizar_for() #void:
{
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  sim = lista_expresion_sentencia()
  { return sim; }
}

Simbolo sentencia_break() :
{ String s = "";
  Token t = new Token();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <BREAK> [ t=<IDENTIFICADOR> {s = t.image;} ] <PYC>
  { 
    sim.lugar = "break";
    return sim; 
  }
}

Simbolo sentencia_continue() :
{ Token t = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <CONTINUE> [ t=<IDENTIFICADOR> {s = t.image;} ] <PYC>
  { sim.codigo = "continue" + s + ';';
    return sim; }
}

Simbolo sentencia_return() :
{ String s = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <RETURN> [ sim1 = expresion() { s = sim1.codigo; } ] <PYC>
  { 
    sim.codigo = sim1.codigo;
    sim.codigo += "&return " + sim1.lugar + "\n";
    return sim; 
  }
}

Simbolo sentencia_throw() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <THROW> sim1=expresion() <PYC>
  { 
    sim.codigo = "throw" + sim1.codigo + ';';
    return sim; 
  }
}

Simbolo sentencia_synchronized() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <SYNCHRONIZED> <PAR_A> sim1=expresion() <PAR_C> sim2 = bloque()
  { 
    sim.codigo = "synchronized" + '(' + sim1.codigo + ')' + sim2.codigo;
    return sim; 
  }
}

Simbolo sentencia_try() :
{
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  Simbolo sim5 = new Simbolo();
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  <TRY> sim1 = bloque()
  ( <CATCH> <PAR_A> sim5=parametro_formal() <PAR_C> sim3=bloque() {s = "cath" + '(' + sim5.codigo + ')' + sim3.codigo;} )*
  [ <FINALLY> sim4 = bloque() {s1 = "finally" + sim4.codigo;} ]
  { 
    sim.codigo = "try" + sim1.codigo + s + s1;
    return sim; 
  }
}