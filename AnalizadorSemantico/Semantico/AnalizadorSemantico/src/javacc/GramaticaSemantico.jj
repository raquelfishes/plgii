/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GramaticaSemantico.jj */
/*@egen*/
options {
  LOOKAHEAD = 1;
  JAVA_UNICODE_ESCAPE = true;
  IGNORE_CASE = false;
}

PARSER_BEGIN(EG1)
package javacc;

import tabla.simbolos.CGestorTS;
import tabla.simbolos.Atributos;
import interfaz.InterfazPlg;

public class EG1/*@bgen(jjtree)*/implements EG1TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTEG1State jjtree = new JJTEG1State();

/*@egen*/
  public static CGestorTS gestorTS;
  public static boolean usaInterfaz = false;
  
  public static void main ( String args [ ] ) {

      //Inicializaci\u00f3n del analizador
      EG1 parser;
      usaInterfaz = false;
      initGestorTS();
		
      if(args.length == 0){

        System.out.println ("ExampleParser: Leyendo de fichero ");
        try {
          parser = new EG1(new java.io.FileInputStream("ProgramaPrueba.java"));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("ExampleParser: El fichero no ha sido encontrado.");
          return;
        }
      }
      else if(args.length == 1){
        System.out.println ("ExampleParser: Leyendo de fichero " + args[0] + " ..." );
        try {
          parser = new EG1(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("ExampleParser: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("ExampleParser:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
      try {
        SimpleNode root = parser.start();
        root.dump("");
        System.out.println ("ExampleParser: La entrada ha sido leida con \u00e9xito.");
      }
      catch(ParseException e){
        System.out.println ("ExampleParser: Ha ocurrido un error durante el an\u00e1lisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("ExampleParser: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }

	public static void initGestorTS(){
		//Inicializaci\u00f3n Tabla de S\u00edmbolos y Gestor de \u00c1mbitos
	    gestorTS = new CGestorTS();
	}

}


PARSER_END(EG1)


/**	Elementos ignorados por el analizador
**	-Espacios en blanco
**	-Caracteres de escape
**	-Comentarios de una linea y comentarios multilinea
*/
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <  "//" (~ ["\n", "\r"])*  >
|  "/*":EntreComentarios 
}

<EntreComentarios> SKIP: 
{  
"*/" : DEFAULT 
} 
<EntreComentarios> MORE: 
{ 
   <~ [ ] > 
}


/** Elementos terminales:
**	-Letras
**	-Digitos
*/
TOKEN :
{
  < #DIGITO : [ "0"-"9" ] >
}

TOKEN :
{ 
  < #LETRA : [ "a" - "z", "A" - "Z" ] >
}


/** Tokens reconocidos por e analizador l\u00e9xico(El orden importa)
**	-Identificador
**	-Palabra reservada
**	-Literal
**	-Delimitador
**	-Operador
*/


//PALABRAS RESERVADAS

TOKEN : {
  		<ABSTRACT: "abstract">  
		|  <BOOLEAN: "boolean">
		|  <BREAK: "break">
		|  <CASE: "case">
		|  <CATCH: "catch">
		|  <CHAR: "char">
		|  <CLASS: "class">
		|  <CONST: "const">
		|  <CONTINUE: "continue">
		|  <DEFAULT_PLG: "default">
		|  <DO: "do">
		|  <DOUBLE: "double">
		|  <ELSE: "else">
		|  <ENUM :"enum">
		|  <EXTENDS :"extends">
		|  <FINAL :"final">
		|  <FINALLY :"finally">
		|  <FLOAT :"float">
		|  <FOR :"for">
		|  <GOTO :"goto">
		|  <IF :"if">
		|  <IMPLEMENTS :"implements">
		|  <IMPORT :"import">
		|  <INSTANCEOF :"instanceof">
		|  <INT :"int">
		|  <INTERFACE :"interface">
		|  <LONG :"long">
		|  <NEW :"new">
		|  <PACKAGE :"package">
		|  <PRIVATE :"private">
		|  <PROTECTED :"protected">
		|  <PUBLIC :"public">
		|  <RETURN :"return">
		|  <SHORT :"short">
		|  <STATIC :"static">
		|  <SUPER :"super">
		|  <SWITCH :"switch">
		|  <SYNCHRONIZED :"synchronized">
		|  <THIS :"this">
		|  <THROW :"throw">
		|  <THROWS :"throws">
		|  <TRY :"try">
		|  <VOID :"void">
		|  <VOLATILE :"volatile">
		|  <WHILE :"while">
		|  <TRUE :"true">
		|  <FALSE :"false">
}


//LITERALES
TOKEN :
{
  < LITERAL_INTEGER:  (<DIGITO>)+ >
|
  < LITERAL_INTEGER_ERROR: (<DIGITO>)+ (~["0"-"9", "\"",".", ";", ",", "=", "%", "+", "-", "*", "/", "(", ")", "[", "]"])+ > { System.out.println("Constante num\u00e9rica mal formada.");}
|
  < LITERAL_FLOAT: ( (<DIGITO>)+ <PUNTO> (<DIGITO>)+ ) >
|
  < LITERAL_CARACTER: ( "'" ~[  "\'" ] "'" ) >
|
  < LITERAL_STRING: ( "\"" (~[ "\"", "\n" ])* "\"" ) >
| 
  < LITERAL_BOOLEAN :  ( "true" | "false" ) >
| 
  < LITERAL_NULL :  "null" >
}


//DELIMITADORES
TOKEN : {
  < PAR_A : "(" > |
  < PAR_C : ")" > |
  < LLAVE_A : "{" > |
  < LLAVE_C : "}" > |
  < COR_A : "[" > |
  < COR_C : "]" > |
  < PYC : ";" > |
  < COMA : "," > |
  < PUNTO : "." > |
  < PYP : ":" > |
  < PREG : "?" >
}

 
//OPERADORES
TOKEN : {
  < OR : "||" > |
  < AND : "&&" > |
  < OR_B : "|" > |
  < AND_B : "&" > |
  < IGUAL : "==" > |
  < N_IGUAL : "!=" > |
  < MENOR : "<" > |
  < MAYOR : ">" > |
  < MENOR_EQ : "<=" > |
  < MAYOR_EQ : ">=" > |
  < ADD : "+" > |
  < SUB : "-" > |
  < MULT : "*" > |
  < DIV : "/" > |
  < MOD : "%" > |
  < PLUS_PLUS : "++" > |
  < SUB_SUB : "--" > |
  < NOT : "!" > |
  < ADD_E : "+=" > |
  < SUB_E : "-=" > |
  < MULT_E : "*=" > |
  < DIV_E : "/=" > |
  < MOD_E : "%=" > |
  < AND_E : "&=" > |
  < OR_E : "|=" > |
  < EQUALS : "=" > |
  < DESP_D : ">>" > |
  < DESP_I : "<<" > |
  < DESP_DNS : ">>>" > |
  < XOR : "^" > |
  < COMP : "~" >
}

//IDENTIFICADOR
TOKEN : {
	< IDENTIFICADOR : ( "_" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	| 	( <LETRA> ( <LETRA> | <DIGITO> | "_" | "$" )* ) 
	| 	( "$" ( <LETRA> | <DIGITO> | "_" | "$" )* )
	>
}

TOKEN : {
	< IDENTIFICADOR_ERROR_1 : ( <LETRA> ( ~[ "0"-"9","a"-"z", "A"-"Z", " ", ".", "\"",".", ";",
			",", "=", "%", "+", "-", "*", "/", "(", ")", "[", "]" ] )* ) > { System.out.println("Identificador mal formado.");}
}

SimpleNode start()      :
{/*@bgen(jjtree) Root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  [ <PACKAGE> identificador() <PYC> ]
  ( <IMPORT> identificador() [ <PUNTO> <MULT> ] <PYC> )*
  ( declaracion_tipo() )*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void identificador() :
{/*@bgen(jjtree) identificador */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) identificador */
  try {
/*@egen*/
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> <IDENTIFICADOR> )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    System.out.println("Identificador "+t.toString());
    Atributos atribs = new Atributos(t.toString());
    gestorTS.insertar(t.toString(), atribs);
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtn000.value = t.image;
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void literal() :
{/*@bgen(jjtree) literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) literal */
  try {
/*@egen*/
  <LITERAL_INTEGER> | <LITERAL_FLOAT> | <LITERAL_CARACTER> | <LITERAL_STRING> | <LITERAL_BOOLEAN> | <LITERAL_NULL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void tipo() :
{/*@bgen(jjtree) tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo */
  try {
/*@egen*/
  ( tipo_primitivo() | identificador() ) ( <COR_A> <COR_C> )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipo_primitivo() :
{/*@bgen(jjtree) tipo_primitivo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_PRIMITIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo_primitivo */
  try {
/*@egen*/
  <BOOLEAN> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_tipo() :
{/*@bgen(jjtree) declaracion_tipo */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_TIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_tipo */
  try {
/*@egen*/
  LOOKAHEAD( ( <ABSTRACT> | <FINAL> | <PUBLIC> )* <CLASS> ) declaracion_clase()
|
  declaracion_interface()
|
  <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tipo_metodo() :
{/*@bgen(jjtree) tipo_metodo */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) tipo_metodo */
  try {
/*@egen*/
  tipo() | <VOID>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lista_de_tipos() :
{/*@bgen(jjtree) lista_de_tipos */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_DE_TIPOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) lista_de_tipos */
  try {
/*@egen*/
  identificador()
  ( <COMA> identificador()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_clase() :
{/*@bgen(jjtree) declaracion_clase */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_CLASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_clase */
  try {
/*@egen*/
  ( <ABSTRACT> | <FINAL> | <PUBLIC> )*
  <CLASS> <IDENTIFICADOR> [ <EXTENDS> identificador() ] [ <IMPLEMENTS> lista_de_tipos() ]
  <LLAVE_A> ( declaracion_cuerpo_clase() )* <LLAVE_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_cuerpo_clase() :
{/*@bgen(jjtree) declaracion_cuerpo_clase */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_CUERPO_CLASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_cuerpo_clase */
  try {
/*@egen*/
  LOOKAHEAD(2)
  inicializador_static()
|
  LOOKAHEAD( [ <PUBLIC> | <PROTECTED> | <PRIVATE> ] identificador() <PAR_A> )
  declaracion_constructora()
|
  LOOKAHEAD( declaracionR_metodo() )
  declaracion_metodo()
|
  campo_declaracion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracionR_metodo() :
{/*@bgen(jjtree) declaracionR_metodo */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACIONR_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracionR_metodo */
  try {
/*@egen*/
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> | <STATIC> | <ABSTRACT> | <FINAL> | <SYNCHRONIZED> )*
  tipo_metodo() <IDENTIFICADOR> <PAR_A>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_interface() :
{/*@bgen(jjtree) declaracion_interface */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_INTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_interface */
  try {
/*@egen*/
  ( <ABSTRACT> | <PUBLIC> )*
  <INTERFACE> <IDENTIFICADOR> [ <EXTENDS> lista_de_tipos() ]
  <LLAVE_A> ( declaracion_miembro_interface() )* <LLAVE_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_miembro_interface() :
{/*@bgen(jjtree) declaracion_miembro_interface */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_MIEMBRO_INTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_miembro_interface */
  try {
/*@egen*/
  LOOKAHEAD( declaracionR_metodo() ) declaracion_metodo()
|
  campo_declaracion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void campo_declaracion() :
{/*@bgen(jjtree) campo_declaracion */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPO_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) campo_declaracion */
  try {
/*@egen*/
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> | <STATIC> | <FINAL> | <VOLATILE> )*
  tipo() declarador_variable() ( <COMA> declarador_variable() )* <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declarador_variable() :
{/*@bgen(jjtree) declarador_variable */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARADOR_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declarador_variable */
  try {
/*@egen*/
  declarador_variable_id() [ <EQUALS> iniciar_variable() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declarador_variable_id() :
{/*@bgen(jjtree) declarador_variable_id */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARADOR_VARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declarador_variable_id */
  try {
/*@egen*/
  <IDENTIFICADOR> ( <COR_A> <COR_C> )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void iniciar_variable() :
{/*@bgen(jjtree) iniciar_variable */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIAR_VARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) iniciar_variable */
  try {
/*@egen*/
  <LLAVE_A> [ iniciar_variable() ( LOOKAHEAD(2) <COMA> iniciar_variable() )* ] [ <COMA> ] <LLAVE_C>
|
  expresion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_metodo() :
{/*@bgen(jjtree) declaracion_metodo */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_metodo */
  try {
/*@egen*/
  ( <PUBLIC> | <PROTECTED> | <PRIVATE> | <STATIC> | <ABSTRACT> | <FINAL> | <SYNCHRONIZED> )*
  tipo_metodo() declarador_metodo() [ <THROWS> lista_de_tipos() ]
  ( bloque() | <PYC> )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declarador_metodo() :
{/*@bgen(jjtree) declarador_metodo */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARADOR_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declarador_metodo */
  try {
/*@egen*/
  <IDENTIFICADOR> parametros_formales() ( <COR_A> <COR_C> )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void parametros_formales() :
{/*@bgen(jjtree) parametros_formales */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS_FORMALES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) parametros_formales */
  try {
/*@egen*/
  <PAR_A> [ parametro_formal() ( <COMA> parametro_formal() )* ] <PAR_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void parametro_formal() :
{/*@bgen(jjtree) parametro_formal */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO_FORMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) parametro_formal */
  try {
/*@egen*/
  tipo() declarador_variable_id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_constructora() :
{/*@bgen(jjtree) declaracion_constructora */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_CONSTRUCTORA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_constructora */
  try {
/*@egen*/
  [ <PUBLIC> | <PROTECTED> | <PRIVATE> ]
  <IDENTIFICADOR> parametros_formales() [ <THROWS> lista_de_tipos() ]
  <LLAVE_A> [ LOOKAHEAD(2) const_explic() ] ( sentencia_bloque() )* <LLAVE_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void const_explic() :
{/*@bgen(jjtree) const_explic */
  SimpleNode jjtn000 = new SimpleNode(JJTCONST_EXPLIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) const_explic */
  try {
/*@egen*/
  <THIS> argumentos() <PYC>
|
  <SUPER> argumentos() <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicializador_static() :
{/*@bgen(jjtree) inicializador_static */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIALIZADOR_STATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) inicializador_static */
  try {
/*@egen*/
  <STATIC> bloque()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion() :
{/*@bgen(jjtree) expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion */
  try {
/*@egen*/
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  asignacion()
|
  expresion_cond()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void asignacion() :
{/*@bgen(jjtree) asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) asignacion */
  try {
/*@egen*/
  expresion_primaria() operador_asignacion() expresion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operador_asignacion() :
{/*@bgen(jjtree) operador_asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_ASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) operador_asignacion */
  try {
/*@egen*/
  <EQUALS> | <MULT_E> | <DIV_E> | <MOD_E> | <ADD_E> | <SUB_E> | <AND_E> | <OR_E>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_cond() :
{/*@bgen(jjtree) expresion_cond */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_COND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_cond */
  try {
/*@egen*/
  expresion_cond_or() [ <PREG> expresion() <PYP> expresion_cond() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_cond_or() :
{/*@bgen(jjtree) expresion_cond_or */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_COND_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_cond_or */
  try {
/*@egen*/
  expresion_cond_and() ( <OR>/*@bgen(jjtree) #Or( 2) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTOR);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ expresion_cond_and()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/        )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_cond_and() :
{/*@bgen(jjtree) expresion_cond_and */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_COND_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_cond_and */
  try {
/*@egen*/
  expresion_or_bin() ( <AND>/*@bgen(jjtree) #And( 2) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(JJTAND);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ expresion_or_bin()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/         )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_or_bin() :
{/*@bgen(jjtree) expresion_or_bin */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_OR_BIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_or_bin */
  try {
/*@egen*/
  expresion_xor() ( <OR_B>/*@bgen(jjtree) #BOr( 2) */
                           {
                             SimpleNode jjtn001 = new SimpleNode(JJTBOR);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ expresion_xor()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/         )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_xor() :
{/*@bgen(jjtree) expresion_xor */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_XOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_xor */
  try {
/*@egen*/
  expresion_and_bin() ( <XOR>/*@bgen(jjtree) #XOr( 2) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTXOR);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ expresion_and_bin()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/        )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_and_bin() :
{/*@bgen(jjtree) expresion_and_bin */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_AND_BIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_and_bin */
  try {
/*@egen*/
  expresion_equal() ( <AND_B>/*@bgen(jjtree) #BAnd( 2) */
                              {
                                SimpleNode jjtn001 = new SimpleNode(JJTBAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ expresion_equal()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/         )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_equal() :
{/*@bgen(jjtree) expresion_equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_EQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_equal */
  try {
/*@egen*/
  expresion_instanceof() ( ( <IGUAL>/*@bgen(jjtree) #Igual( 2) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTIGUAL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ expresion_instanceof()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/          
  							| <N_IGUAL>/*@bgen(jjtree) #NIgual( 2) */
                                                                    {
                                                                      SimpleNode jjtn002 = new SimpleNode(JJTNIGUAL);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
                                                                    }
                                                                    try {
/*@egen*/ expresion_instanceof()/*@bgen(jjtree)*/
                                                                    } catch (Throwable jjte002) {
                                                                      if (jjtc002) {
                                                                        jjtree.clearNodeScope(jjtn002);
                                                                        jjtc002 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte002 instanceof RuntimeException) {
                                                                        throw (RuntimeException)jjte002;
                                                                      }
                                                                      if (jjte002 instanceof ParseException) {
                                                                        throw (ParseException)jjte002;
                                                                      }
                                                                      throw (Error)jjte002;
                                                                    } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                      }
                                                                    }
/*@egen*/           
  							)
  						)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_instanceof() :
{/*@bgen(jjtree) expresion_instanceof */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_INSTANCEOF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_instanceof */
  try {
/*@egen*/
  expresion_relacional() [ <INSTANCEOF> tipo() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_relacional() :
{/*@bgen(jjtree) expresion_relacional */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_RELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_relacional */
  try {
/*@egen*/
  expresion_shift() ( ( <MENOR>/*@bgen(jjtree) #Menor( 2) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(JJTMENOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ expresion_shift()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/          
  						| <MAYOR>/*@bgen(jjtree) #Mayor( 2) */
                                                          {
                                                            SimpleNode jjtn002 = new SimpleNode(JJTMAYOR);
                                                            boolean jjtc002 = true;
                                                            jjtree.openNodeScope(jjtn002);
                                                          }
                                                          try {
/*@egen*/ expresion_shift()/*@bgen(jjtree)*/
                                                          } catch (Throwable jjte002) {
                                                            if (jjtc002) {
                                                              jjtree.clearNodeScope(jjtn002);
                                                              jjtc002 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte002 instanceof RuntimeException) {
                                                              throw (RuntimeException)jjte002;
                                                            }
                                                            if (jjte002 instanceof ParseException) {
                                                              throw (ParseException)jjte002;
                                                            }
                                                            throw (Error)jjte002;
                                                          } finally {
                                                            if (jjtc002) {
                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                            }
                                                          }
/*@egen*/          
  						| <MENOR_EQ>/*@bgen(jjtree) #MenorEq( 2) */
                                                             {
                                                               SimpleNode jjtn003 = new SimpleNode(JJTMENOREQ);
                                                               boolean jjtc003 = true;
                                                               jjtree.openNodeScope(jjtn003);
                                                             }
                                                             try {
/*@egen*/ expresion_shift()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte003) {
                                                               if (jjtc003) {
                                                                 jjtree.clearNodeScope(jjtn003);
                                                                 jjtc003 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte003 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte003;
                                                               }
                                                               if (jjte003 instanceof ParseException) {
                                                                 throw (ParseException)jjte003;
                                                               }
                                                               throw (Error)jjte003;
                                                             } finally {
                                                               if (jjtc003) {
                                                                 jjtree.closeNodeScope(jjtn003,  2);
                                                               }
                                                             }
/*@egen*/            
  						| <MAYOR_EQ>/*@bgen(jjtree) #MayorEq( 2) */
                                                             {
                                                               SimpleNode jjtn004 = new SimpleNode(JJTMAYOREQ);
                                                               boolean jjtc004 = true;
                                                               jjtree.openNodeScope(jjtn004);
                                                             }
                                                             try {
/*@egen*/ expresion_shift()/*@bgen(jjtree)*/
                                                             } catch (Throwable jjte004) {
                                                               if (jjtc004) {
                                                                 jjtree.clearNodeScope(jjtn004);
                                                                 jjtc004 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte004 instanceof RuntimeException) {
                                                                 throw (RuntimeException)jjte004;
                                                               }
                                                               if (jjte004 instanceof ParseException) {
                                                                 throw (ParseException)jjte004;
                                                               }
                                                               throw (Error)jjte004;
                                                             } finally {
                                                               if (jjtc004) {
                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                               }
                                                             }
/*@egen*/            
  						)
  					)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_shift() :
{/*@bgen(jjtree) expresion_shift */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_SHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_shift */
  try {
/*@egen*/
  expresion_add() ( ( <DESP_I>/*@bgen(jjtree) #DespI( 2) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(JJTDESPI);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ expresion_add()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/          
  					| <DESP_D>/*@bgen(jjtree) #DespD( 2) */
                                                   {
                                                     SimpleNode jjtn002 = new SimpleNode(JJTDESPD);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
                                                   }
                                                   try {
/*@egen*/ expresion_add()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte002;
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       throw (ParseException)jjte002;
                                                     }
                                                     throw (Error)jjte002;
                                                   } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002,  2);
                                                     }
                                                   }
/*@egen*/          
  					| <DESP_DNS>/*@bgen(jjtree) #DespDNS( 2) */
                                                     {
                                                       SimpleNode jjtn003 = new SimpleNode(JJTDESPDNS);
                                                       boolean jjtc003 = true;
                                                       jjtree.openNodeScope(jjtn003);
                                                     }
                                                     try {
/*@egen*/ expresion_add()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte003) {
                                                       if (jjtc003) {
                                                         jjtree.clearNodeScope(jjtn003);
                                                         jjtc003 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte003 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte003;
                                                       }
                                                       if (jjte003 instanceof ParseException) {
                                                         throw (ParseException)jjte003;
                                                       }
                                                       throw (Error)jjte003;
                                                     } finally {
                                                       if (jjtc003) {
                                                         jjtree.closeNodeScope(jjtn003,  2);
                                                       }
                                                     }
/*@egen*/            
  					)
  				)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_add() :
{/*@bgen(jjtree) expresion_add */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_ADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_add */
  try {
/*@egen*/
  expresion_mult() ( ( <ADD>/*@bgen(jjtree) #Add( 2) */
                             {
                               SimpleNode jjtn001 = new SimpleNode(JJTADD);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ expresion_mult()/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
                             }
/*@egen*/        
					 | <SUB>/*@bgen(jjtree) #Sub( 2) */
                                                 {
                                                   SimpleNode jjtn002 = new SimpleNode(JJTSUB);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                 }
                                                 try {
/*@egen*/ expresion_mult()/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte002) {
                                                   if (jjtc002) {
                                                     jjtree.clearNodeScope(jjtn002);
                                                     jjtc002 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte002 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte002;
                                                   }
                                                   if (jjte002 instanceof ParseException) {
                                                     throw (ParseException)jjte002;
                                                   }
                                                   throw (Error)jjte002;
                                                 } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002,  2);
                                                   }
                                                 }
/*@egen*/        
					 )
  				)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_mult() :
{/*@bgen(jjtree) expresion_mult */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_MULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_mult */
  try {
/*@egen*/
  expresion_unaria() ( ( <MULT>/*@bgen(jjtree) #Mult( 2) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(JJTMULT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/         
  						| <DIV>/*@bgen(jjtree) #Div( 2) */
                                                        {
                                                          SimpleNode jjtn002 = new SimpleNode(JJTDIV);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte002) {
                                                          if (jjtc002) {
                                                            jjtree.clearNodeScope(jjtn002);
                                                            jjtc002 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte002 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte002;
                                                          }
                                                          if (jjte002 instanceof ParseException) {
                                                            throw (ParseException)jjte002;
                                                          }
                                                          throw (Error)jjte002;
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                          }
                                                        }
/*@egen*/        
  						| <MOD>/*@bgen(jjtree) #Mod( 2) */
                                                        {
                                                          SimpleNode jjtn003 = new SimpleNode(JJTMOD);
                                                          boolean jjtc003 = true;
                                                          jjtree.openNodeScope(jjtn003);
                                                        }
                                                        try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte003) {
                                                          if (jjtc003) {
                                                            jjtree.clearNodeScope(jjtn003);
                                                            jjtc003 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte003 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte003;
                                                          }
                                                          if (jjte003 instanceof ParseException) {
                                                            throw (ParseException)jjte003;
                                                          }
                                                          throw (Error)jjte003;
                                                        } finally {
                                                          if (jjtc003) {
                                                            jjtree.closeNodeScope(jjtn003,  2);
                                                          }
                                                        }
/*@egen*/        
  						)
  					)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_unaria() :
{/*@bgen(jjtree) expresion_unaria */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_UNARIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_unaria */
  try {
/*@egen*/
  (   <ADD>/*@bgen(jjtree) UnaryAdd */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTUNARYADD);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/          
  	| <SUB>/*@bgen(jjtree) UnarySub */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTUNARYSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/          
  ) 
|
  expresion_pre_inc()
|
  expresion_pre_dec()
|
  expresion_unaria_dif()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_pre_inc() :
{/*@bgen(jjtree) expresion_pre_inc */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_PRE_INC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_pre_inc */
  try {
/*@egen*/
  <PLUS_PLUS>/*@bgen(jjtree) PlusPlus */
              {
                SimpleNode jjtn001 = new SimpleNode(JJTPLUSPLUS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ expresion_primaria()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/          /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_pre_dec() :
{/*@bgen(jjtree) expresion_pre_dec */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_PRE_DEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_pre_dec */
  try {
/*@egen*/
  <SUB_SUB>/*@bgen(jjtree) SubSub */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTSUBSUB);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ expresion_primaria()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/        /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_unaria_dif() :
{/*@bgen(jjtree) expresion_unaria_dif */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_UNARIA_DIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_unaria_dif */
  try {
/*@egen*/
  (   <COMP>/*@bgen(jjtree) Comp */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTCOMP);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/      
  	| <NOT>/*@bgen(jjtree) Not */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTNOT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ expresion_unaria()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/     
  ) 
|
  LOOKAHEAD( look_cast() )
  expresion_cast()
|
  expresion_post()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void look_cast() :
{/*@bgen(jjtree) look_cast */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOK_CAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) look_cast */
  try {
/*@egen*/
  LOOKAHEAD(2)
  <PAR_A> tipo_primitivo()
|
  LOOKAHEAD(<PAR_A> identificador() <COR_A>)
  <PAR_A> identificador() <COR_A> <COR_C>
|
  <PAR_A> identificador() <PAR_C> ( <COMP> | <NOT> | <PAR_A> | <IDENTIFICADOR> | <THIS> | <SUPER> | <NEW> | literal() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_post() :
{/*@bgen(jjtree) expresion_post */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_POST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_post */
  try {
/*@egen*/
  expresion_primaria() [ <PLUS_PLUS> | <SUB_SUB> ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_cast() :
{/*@bgen(jjtree) expresion_cast */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_CAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_cast */
  try {
/*@egen*/
  LOOKAHEAD(2)
  <PAR_A> tipo_primitivo() ( <COR_A> <COR_C> )* <PAR_C> expresion_unaria()
|
  <PAR_A> identificador() ( <COR_A> <COR_C> )* <PAR_C> expresion_unaria_dif()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_primaria() :
{/*@bgen(jjtree) expresion_primaria */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_PRIMARIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_primaria */
  try {
/*@egen*/
  prefijo_primario() ( sufijo_primario() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void prefijo_primario() :
{/*@bgen(jjtree) prefijo_primario */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIJO_PRIMARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) prefijo_primario */
  try {
/*@egen*/
  literal()
|
  identificador()
|
  <THIS>
|
  <SUPER> <PUNTO> <IDENTIFICADOR>
|
  <PAR_A> expresion() <PAR_C>
|
  expresion_asignacion()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sufijo_primario() :
{/*@bgen(jjtree) sufijo_primario */
  SimpleNode jjtn000 = new SimpleNode(JJTSUFIJO_PRIMARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sufijo_primario */
  try {
/*@egen*/
  <COR_A> expresion() <COR_C>
|
  <PUNTO> <IDENTIFICADOR>
|
  argumentos()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void argumentos() :
{/*@bgen(jjtree) argumentos */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) argumentos */
  try {
/*@egen*/
  <PAR_A> [ lista_argumentos() ] <PAR_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lista_argumentos() :
{/*@bgen(jjtree) lista_argumentos */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_ARGUMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) lista_argumentos */
  try {
/*@egen*/
  expresion() ( <COMA> expresion() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_asignacion() :
{/*@bgen(jjtree) expresion_asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_ASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_asignacion */
  try {
/*@egen*/
  LOOKAHEAD(2)
  <NEW> tipo_primitivo() dimensiones_array()
|
  <NEW> identificador() ( argumentos() | dimensiones_array() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dimensiones_array() :
{/*@bgen(jjtree) dimensiones_array */
  SimpleNode jjtn000 = new SimpleNode(JJTDIMENSIONES_ARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) dimensiones_array */
  try {
/*@egen*/
  ( LOOKAHEAD(2) <COR_A> expresion() <COR_C> )+ ( LOOKAHEAD(2) <COR_A> <COR_C> )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia() :
{/*@bgen(jjtree) sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia */
  try {
/*@egen*/
  LOOKAHEAD(2)
  sentencia_etiqueta()
|
  bloque()
|
  sentencia_vacia()
|
  expresion_sentencia() <PYC>
|
  sentencia_switch()
|
  sentencia_if()
|
  sentencia_while()
|
  sentencia_do()
|
  sentencia_for()
|
  sentencia_break()
|
  sentencia_continue()
|
  sentencia_return()
|
  sentencia_throw()
|
  sentencia_synchronized()
|
  sentencia_try()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_etiqueta() :
{/*@bgen(jjtree) sentencia_etiqueta */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_ETIQUETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_etiqueta */
  try {
/*@egen*/
  <IDENTIFICADOR> <PYP> sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bloque() :
{/*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) bloque */
  try {
/*@egen*/
  { gestorTS.nuevoAmbito(); }
  <LLAVE_A> ( sentencia_bloque() )* <LLAVE_C>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { gestorTS.cierraAmbito();  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_bloque() :
{/*@bgen(jjtree) sentencia_bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_BLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_bloque */
  try {
/*@egen*/
  LOOKAHEAD(tipo() <IDENTIFICADOR>)
  declaracion_variable_local() <PYC>
|
  sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaracion_variable_local() :
{/*@bgen(jjtree) declaracion_variable_local */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_VARIABLE_LOCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) declaracion_variable_local */
  try {
/*@egen*/
  tipo() declarador_variable() ( <COMA> declarador_variable() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_vacia() :
{/*@bgen(jjtree) sentencia_vacia */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_VACIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_vacia */
  try {
/*@egen*/
  <PYC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expresion_sentencia() :
{/*@bgen(jjtree) expresion_sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION_SENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) expresion_sentencia */
  try {
/*@egen*/
  expresion_pre_inc()
|
  expresion_pre_dec()
|
  LOOKAHEAD( expresion_primaria() operador_asignacion() )
  asignacion()
|
  expresion_post()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_switch() :
{/*@bgen(jjtree) sentencia_switch */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_switch */
  try {
/*@egen*/
  <SWITCH> <PAR_A> expresion() <PAR_C> <LLAVE_A>
    ( etiqueta_switch() ( sentencia_bloque() )* )*
  <LLAVE_C>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void etiqueta_switch() :
{/*@bgen(jjtree) etiqueta_switch */
  SimpleNode jjtn000 = new SimpleNode(JJTETIQUETA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) etiqueta_switch */
  try {
/*@egen*/
  <CASE> expresion() <PYP>
|
  <DEFAULT_PLG> <PYP>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_if() :
{/*@bgen(jjtree) sentencia_if */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_if */
  try {
/*@egen*/
  <IF> <PAR_A> expresion() <PAR_C> sentencia() [ LOOKAHEAD(1) <ELSE> sentencia() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_while() :
{/*@bgen(jjtree) sentencia_while */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_while */
  try {
/*@egen*/
  <WHILE> <PAR_A> expresion() <PAR_C> sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_do() :
{/*@bgen(jjtree) sentencia_do */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_do */
  try {
/*@egen*/
  <DO> sentencia() <WHILE> <PAR_A> expresion() <PAR_C> <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_for() :
{/*@bgen(jjtree) sentencia_for */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_for */
  try {
/*@egen*/
  <FOR> <PAR_A> [ inicio_for() ] <PYC> [ expresion() ] <PYC> [ actualizar_for() ] <PAR_C> sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void lista_expresion_sentencia() :
{/*@bgen(jjtree) lista_expresion_sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_EXPRESION_SENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) lista_expresion_sentencia */
  try {
/*@egen*/
  expresion_sentencia() ( <COMA> expresion_sentencia() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void inicio_for() :
{/*@bgen(jjtree) inicio_for */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) inicio_for */
  try {
/*@egen*/
  LOOKAHEAD( tipo() <IDENTIFICADOR> )
  declaracion_variable_local()
|
  lista_expresion_sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void actualizar_for() :
{/*@bgen(jjtree) actualizar_for */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUALIZAR_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) actualizar_for */
  try {
/*@egen*/
  lista_expresion_sentencia()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_break() :
{/*@bgen(jjtree) sentencia_break */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_BREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_break */
  try {
/*@egen*/
  <BREAK> [ <IDENTIFICADOR> ] <PYC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_continue() :
{/*@bgen(jjtree) sentencia_continue */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_CONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_continue */
  try {
/*@egen*/
  <CONTINUE> [ <IDENTIFICADOR> ] <PYC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_return() :
{/*@bgen(jjtree) sentencia_return */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_RETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_return */
  try {
/*@egen*/
  <RETURN> [ expresion() ] <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_throw() :
{/*@bgen(jjtree) sentencia_throw */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_THROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_throw */
  try {
/*@egen*/
  <THROW> expresion() <PYC>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_synchronized() :
{/*@bgen(jjtree) sentencia_synchronized */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_SYNCHRONIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_synchronized */
  try {
/*@egen*/
  <SYNCHRONIZED> <PAR_A> expresion() <PAR_C> bloque()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void sentencia_try() :
{/*@bgen(jjtree) sentencia_try */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA_TRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{/*@bgen(jjtree) sentencia_try */
  try {
/*@egen*/
  <TRY> bloque()
  ( <CATCH> <PAR_A> parametro_formal() <PAR_C> bloque() )*
  [ <FINALLY> bloque() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}