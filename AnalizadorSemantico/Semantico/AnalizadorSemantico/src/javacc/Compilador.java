/* Generated By:JJTree&JavaCC: Do not edit this line. Compilador.java */
package javacc;

import java.io.FileOutputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;

import tabla.simbolos.v2.CGestorTS;
import tabla.simbolos.v2.Atributos;
import interfaz.InterfazPlg;
import javacc.Simbolo;
import traductor.Traductor;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants, CompiladorConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();public static CGestorTS gestorTS;
  public static boolean usaInterfaz = false;
  public static java.io.DataOutputStream fichero;

  public static CGestorTS gestorTSIntermedia;

  public static Traductor traductor;

  public static void main ( String args [] ) {

      //Inicialización del analizador
      Compilador compilador;
      usaInterfaz = false;
      initGestorTS();

      if(args.length == 0){

        System.out.println ("Compilador: Leyendo de fichero ");
        try {
          compilador = new Compilador(new java.io.FileInputStream("ProgramaPrueba.java"));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero no ha sido encontrado.");
          return;
        }
      }
      else if(args.length == 1){
        System.out.println ("Compilador: Leyendo de fichero " + args[0] + " ..." );
        try {
          compilador = new Compilador(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("Compilador: El fichero " + args[0] + " no ha sido encontrado.");
          return;
        }
      }
      else {
        System.out.println ("Compilador:  Debes utilizarlo de una de las siguientes formas:");
        System.out.println ("         java ExampleParser < fichero");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser fichero");
        return ;
      }
          try {
        fichero = new java.io.DataOutputStream( new java.io.FileOutputStream("ejemplos/ProgramaIntermedio.txt"));
      }
      catch(java.io.FileNotFoundException e){
        System.out.println ("MAL, NO HAS CREADO EL FICHERO");
        return;
      }
      try {
        SimpleNode root = Compilador.compilar();
                Atributos.resetAliasCounter();
        root.dump("");
        System.out.println ("Compilador: La entrada ha sido leida con \u00e9xito.");
        jjtree.rootNode().interpret();

        //Codigo final
        traductor = new Traductor(gestorTS);
        traductor.traduce("ejemplos/ProgramaIntermedio.txt", "ejemplos/ProgramaFinal.txt");
        System.out.println("Traducido.");

      }
      catch(ParseException e){
        System.out.println ("Compilador: Ha ocurrido un error durante el an\u00e1lisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Compilador: Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }
    }

  public static void escribeFichero(String s)
    {
      try {
        fichero.writeUTF(s);
      }
      catch(IOException e) {
        System.out.println("No se ha escrito el fichero de c\u00f3digo intermedio." + e.getMessage());
      }
    }

        public static void initGestorTS(){
                //Inicialización Tabla de Símbolos y Gestor de Ámbitos
           gestorTS = new CGestorTS();
           gestorTSIntermedia = new CGestorTS();
        }

        public Node rootNode() {
    return jjtree.rootNode();
  }

  public static int actualTmp=0, actualCase=0, actualIf=0, actualBucle=0, actualEtiq = 0;
  public static String nuevaTemp(){
    return "tmp"+(actualTmp++);
  }
  public static String nuevoCase(){
      return "case"+(++actualCase);
  }
  public static String nuevoIf(){
    return "if"+(actualIf);
  }
  public static String elseIf(){
    return "else-if"+(actualIf);
  }
  public static String finIf(){
    return "fin-if"+(actualIf++);
  }
  public static String nuevoBucle(){
    return "bucle"+(actualBucle);
  }
  public static String finBucle(){
    return "fin-bucle"+(actualBucle++);
  }
  public static String nuevaEtiq(){
    return "etiq"+(actualEtiq++);
  }

  static final public SimpleNode compilar() throws ParseException {
 /*@bgen(jjtree) compilar */
  Nodocompilar jjtn000 = new Nodocompilar(JJTCOMPILAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        identificador();
        jj_consume_token(PYC);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
        identificador();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUNTO:
          jj_consume_token(PUNTO);
          jj_consume_token(MULT);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(PYC);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case FINAL:
        case INTERFACE:
        case PUBLIC:
        case PYC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        declaracion_tipo();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

/* Descomentar si se quiere volver a la version antigua sin comprobacion semántica de las funciones
void identificador() :
{
  Token t, t1 = null;
  String s = "";
  String restoTipo = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  t = <IDENTIFICADOR> ( LOOKAHEAD(2) <PUNTO> t1=<IDENTIFICADOR> {restoTipo += "." + t1.image;} )*
  {
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

	jjtThis.value = t.image + restoTipo;

	//jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);
  }
}*/
  static final public Token identificador() throws ParseException {
 /*@bgen(jjtree) identificador */
  Nodoidentificador jjtn000 = new Nodoidentificador(JJTIDENTIFICADOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t, t1 = null;
  String restoTipo = "";
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = jj_consume_token(IDENTIFICADOR);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(PUNTO);
        t1 = jj_consume_token(IDENTIFICADOR);
                                                                 restoTipo += "." + t1.image;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (usaInterfaz){
      InterfazPlg.escribirIdentificadores(t.toString());
    }

        jjtn000.value = t.image + restoTipo;

        //jjtThis.pilaTipos.push(jjtThis.nodeType);
    //System.out.println("identificador "+t.image.toString());
    //System.out.println("identificador "+t.kind);

    /* NECESITO ENVIAR ESTE STRING */
    s = t.image + restoTipo;
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String literal() throws ParseException {
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_INTEGER:
    NodoLiteralInteger jjtn001 = new NodoLiteralInteger(JJTLITERALINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        s = literal_integer();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
                                         {if (true) return s;}
      break;
    case LITERAL_FLOAT:
    NodoLiteralFloat jjtn002 = new NodoLiteralFloat(JJTLITERALFLOAT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
      try {
        s = literal_float();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
      }
                                      {if (true) return s;}
      break;
    case LITERAL_CARACTER:
    NodoLiteralCaracter jjtn003 = new NodoLiteralCaracter(JJTLITERALCARACTER);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtn003.jjtSetFirstToken(getToken(1));
      try {
        s = literal_caracter();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtn003.jjtSetLastToken(getToken(0));
    }
      }
                                            {if (true) return s;}
      break;
    case LITERAL_STRING:
    NodoLiteralString jjtn004 = new NodoLiteralString(JJTLITERALSTRING);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
      try {
        s = literal_string();
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
      }
                                        {if (true) return s;}
      break;
    case LITERAL_BOOLEAN:
    NodoLiteralBoolean jjtn005 = new NodoLiteralBoolean(JJTLITERALBOOLEAN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
      try {
        s = literal_boolean();
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtn005.jjtSetLastToken(getToken(0));
    }
      }
                if (s == "true")
                        {if (true) return ""+1;}
                else
                        {if (true) return ""+0;}
      break;
    case LITERAL_NULL:
    NodoLiteralNull jjtn006 = new NodoLiteralNull(JJTLITERALNULL);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtn006.jjtSetFirstToken(getToken(1));
      try {
        s = literal_null();
      } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtn006.jjtSetLastToken(getToken(0));
    }
      }
                                    {if (true) return s;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String literal_integer() throws ParseException {
        Token t = new Token();
        if (usaInterfaz)
        InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_INTEGER);
                                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String literal_float() throws ParseException {
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_FLOAT);
                          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String literal_caracter() throws ParseException {
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_CARACTER);
                             {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String literal_string() throws ParseException {
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_STRING);
                           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String literal_boolean() throws ParseException {
  Token t = new Token();
if (usaInterfaz)

    InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_BOOLEAN);
                            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String literal_null() throws ParseException {
  Token t = new Token();
if (usaInterfaz)
    InterfazPlg.escribirAvisos();
    t = jj_consume_token(LITERAL_NULL);
                         {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/*
void tipo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  ( tipo_primitivo() | identificador() ) ( <COR_A> <COR_C> )*
}

*/
  static final public Token tipo() throws ParseException {
 /*@bgen(jjtree) tipo */
  Nodotipo jjtn000 = new Nodotipo(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s = "";
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        t = tipo_primitivo();
        break;
      case IDENTIFICADOR:
        t = identificador();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
      s += '[' + ']';
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    /* 
    NECESITO DEVOLVER EL STRING QUE ME VIENE DE TIPO_PRIMITIVO O DE IDENTIFICADOR 
    * s = tipo_primitivo | s = identificador
    * return s;
    */
    {if (true) return t;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

/* Descomentar si se quiere volver a la version antigua sin comprobacion semántica de las funciones
void tipo_primitivo() :
{
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
}
{
  	(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})
    | <CHAR> { jjtThis.value = ConstantesTipos.CHAR;}
    | <SHORT> { jjtThis.value = ConstantesTipos.SHORT;}
    | <INT> { jjtThis.value = ConstantesTipos.INT;}
    | <LONG> { jjtThis.value = ConstantesTipos.LONG;}
    | <FLOAT> { jjtThis.value = ConstantesTipos.FLOAT;}
    | <DOUBLE> { jjtThis.value = ConstantesTipos.DOUBLE;}

}
*/
  static final public Token tipo_primitivo() throws ParseException {
 /*@bgen(jjtree) tipo_primitivo */
  Nodotipo_primitivo jjtn000 = new Nodotipo_primitivo(JJTTIPO_PRIMITIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        //t =(<BOOLEAN> { jjtThis.value = ConstantesTipos.BOOLEAN;})<-- CAMBIO MIO(Ricardo el más guay), no entiendo que diferencia hay si le quitas los parentesis
                t = jj_consume_token(BOOLEAN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                       jjtn000.value = ConstantesTipos.BOOLEAN; {if (true) return t;}
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                  jjtn000.value = ConstantesTipos.CHAR; {if (true) return t;}
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                   jjtn000.value = ConstantesTipos.SHORT; {if (true) return t;}
        break;
      case INT:
        t = jj_consume_token(INT);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
                 jjtn000.value = ConstantesTipos.INT; {if (true) return t;}
        break;
      case LONG:
        t = jj_consume_token(LONG);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                  jjtn000.value = ConstantesTipos.LONG; {if (true) return t;}
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                   jjtn000.value = ConstantesTipos.FLOAT; {if (true) return t;}
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.value = ConstantesTipos.DOUBLE; {if (true) return t;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void declaracion_tipo() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_2(2147483647)) {
      sim = declaracion_clase();
          escribeFichero(sim.codigo);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PUBLIC:
        sim = declaracion_interface();
          escribeFichero(sim.codigo);
        break;
      case PYC:
        jj_consume_token(PYC);
          escribeFichero(sim.codigo);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public Token tipo_metodo() throws ParseException {
 /*@bgen(jjtree) tipo_metodo */
  Nodotipo_metodo jjtn000 = new Nodotipo_metodo(JJTTIPO_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s = "";
  Token t=null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFICADOR:
        t = tipo();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.value = t.image;
    {if (true) return t;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.value = t.image;
    {if (true) return t;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String lista_de_tipos() throws ParseException {
  String s = "";
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    t = identificador();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMA);
      t1 = identificador();
                                  s = ',' + t1.image;
    }
    {if (true) return t.image + s;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_clase() throws ParseException {
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  String s4 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        jj_consume_token(FINAL);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLASS);
    t1 = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      t = identificador();
                                                                 s2 = "extends" + t.image;
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      jj_consume_token(IMPLEMENTS);
      s1 = lista_de_tipos();
                                                                                                                                      s3 = "implements" + s1;
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case VOID:
      case VOLATILE:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      sim1 = declaracion_cuerpo_clase();
                                                  s4+=sim1.codigo;
    }
    jj_consume_token(LLAVE_C);
    sim.codigo = "\u005cnclass " + t1.image + ":\u005cn";
      sim.codigo += s4;
      {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_cuerpo_clase() throws ParseException {
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_3(2)) {
      sim = inicializador_static();
    {if (true) return sim;}
    } else if (jj_2_4(2147483647)) {
      sim = declaracion_constructora();
    {if (true) return sim;}
    } else if (jj_2_5(2147483647)) {
      sim = declaracion_metodo();
    {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case VOLATILE:
      case IDENTIFICADOR:
        sim = campo_declaracion();
    {if (true) return sim;}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracionR_metodo() throws ParseException {
  Token t = new Token();
  Token t1 = new Token();
  Token t2 = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
        break;
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
        break;
      case FINAL:
        t = jj_consume_token(FINAL);
        break;
      case SYNCHRONIZED:
        t = jj_consume_token(SYNCHRONIZED);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t2 = tipo_metodo();
    t1 = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PAR_A);
      sim.codigo = t.image + t2.image + t1.image;
      {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_interface() throws ParseException {
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        t = jj_consume_token(ABSTRACT);
        break;
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(INTERFACE);
    t1 = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      s2 = lista_de_tipos();
                                                                      s1 = "extends" + s2;
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case VOID:
      case VOLATILE:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      sim1 = declaracion_miembro_interface();
                                                      s3=sim1.codigo;
    }
    jj_consume_token(LLAVE_C);
    sim.codigo = t.image + "interface" + t1.image + s1 + '{' + s3 + '}';
      {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_miembro_interface() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_6(2147483647)) {
      sim = declaracion_metodo();
                                                                  {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case VOLATILE:
      case IDENTIFICADOR:
        sim = campo_declaracion();
    sim.lugar = nuevaTemp();
    {if (true) return sim;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo campo_declaracion() throws ParseException {
 /*@bgen(jjtree) campo_declaracion */
  Nodocampo_declaracion jjtn000 = new Nodocampo_declaracion(JJTCAMPO_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t = new Token();
  Token t1 = new Token();
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOLATILE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          t = jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          t = jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          t = jj_consume_token(PRIVATE);
          break;
        case STATIC:
          t = jj_consume_token(STATIC);
          break;
        case FINAL:
          t = jj_consume_token(FINAL);
          break;
        case VOLATILE:
          t = jj_consume_token(VOLATILE);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t1 = tipo();
      sim = declarador_variable();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        sim1 = declarador_variable();
                                                                                  sim.codigo += sim1.codigo;
      }
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declarador_variable() throws ParseException {
  String aux = "";
  Simbolo sim1 = new Simbolo();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = declarador_variable_id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      sim1 = iniciar_variable();
        if (!sim1.lugar.equals("new"))
        {
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + sim1.lugar + "\u005cn";
        }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
      {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declarador_variable_id() throws ParseException {
 /*@bgen(jjtree) declarador_variable_id */
  Nododeclarador_variable_id jjtn000 = new Nododeclarador_variable_id(JJTDECLARADOR_VARIABLE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = jj_consume_token(IDENTIFICADOR);
    jjtn000.value = t.image;

        String lexema = t.image;
        if(!gestorTSIntermedia.estaLexema(lexema))
        {
                Atributos a = new Atributos(lexema,"",false);//FIXME 
                gestorTSIntermedia.insertar(lexema, a);
                System.out.println("TS: Insertando ident: "+ lexema +" con alias " +a.getAlias());
        }
        else
        {
                System.err.println("No se puede insertar el lexema: "+lexema);
        }

        //Atributos atribs = new Atributos(jjtThis.name, jjtThis.pilaTipos.peek());
        //Compilador.gestorTS.insertar(jjtThis.name, atribs);
        //System.out.println("Identificador: "+ jjtThis.name + " con tipo "+jjtThis.pilaTipos.peek());

      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
    {if (true) return sim;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo iniciar_variable() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s ="";
  String s1 = "";
  String s2 = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVE_A:
      jj_consume_token(LLAVE_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        sim1 = iniciar_variable();
        label_14:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_14;
          }
          jj_consume_token(COMA);
          sim2 = iniciar_variable();
                                                                                          s = ',' + s;
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
                                                                                                                         s2 = ',' + "";
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(LLAVE_C);
    {if (true) return sim;}
      break;
    case NEW:
    case SUPER:
    case THIS:
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
    case PAR_A:
    case ADD:
    case SUB:
    case PLUS_PLUS:
    case SUB_SUB:
    case NOT:
    case COMP:
    case IDENTIFICADOR:
      sim = expresion();
                      {if (true) return sim;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_metodo() throws ParseException {
 /*@bgen(jjtree) declaracion_metodo */
  Nododeclaracion_metodo jjtn000 = new Nododeclaracion_metodo(JJTDECLARACION_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t = new Token();
  Token t1 = new Token();
  String s ="";
  String s1 = "";
  String s2 = "";
  String s3 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
   System.out.println("----------------- ABRIENDO-AMBITO ------------------");

    gestorTSIntermedia.nuevoAmbito("");
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case FINAL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          t = jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          t = jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          t = jj_consume_token(PRIVATE);
          break;
        case STATIC:
          t = jj_consume_token(STATIC);
          break;
        case ABSTRACT:
          t = jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          t = jj_consume_token(FINAL);
          break;
        case SYNCHRONIZED:
          t = jj_consume_token(SYNCHRONIZED);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t1 = tipo_metodo();
      sim = declarador_metodo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        s1 = lista_de_tipos();
                                                                                 s2 = "throws" + s1;
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVE_A:
        sim1 = bloque();
        break;
      case PYC:
        jj_consume_token(PYC);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        gestorTSIntermedia.cierraAmbito();
    System.out.println("----------------- CERRANDO-AMBITO ------------------");

      if(t1.image=="void") {
        sim.codigo += sim1.codigo + "&return\u005cn";
          {if (true) return sim;}
        }
        else {
          sim.codigo += sim1.codigo;
          {if (true) return sim;}
        }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declarador_metodo() throws ParseException {
 /*@bgen(jjtree) declarador_metodo */
  Nododeclarador_metodo jjtn000 = new Nododeclarador_metodo(JJTDECLARADOR_METODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t = new Token();
  String s = "";
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = jj_consume_token(IDENTIFICADOR);
      sim = parametros_formales();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_16;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
                                                                     s = '[' + ']' + "";
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.value = t.image;
    sim.codigo = "&" + t.image +":\u005cn";
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo parametros_formales() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PAR_A);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFICADOR:
      sim1 = parametro_formal();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMA);
        sim2 = parametro_formal();
                                                                          s = ',' + sim2.codigo;
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
    sim.lugar = nuevaTemp();
    sim.codigo = '(' + sim1.codigo + s + ')';
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo parametro_formal() throws ParseException {
  String s = "";
  String s1 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    t = tipo();
    sim1 = declarador_variable_id();
    sim.codigo = s + sim1.codigo;
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_constructora() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s ="";
  String s1 = "";
  Token t = new Token();
  Token t1;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        t = jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        t = jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        t = jj_consume_token(PRIVATE);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    t1 = jj_consume_token(IDENTIFICADOR);
    sim1 = parametros_formales();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      s1 = lista_de_tipos();
                                                                                      s1 = "throws" + s1;
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_A);
    if (jj_2_8(2)) {
      sim2 = const_explic();
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      sim3 = sentencia_bloque();
    }
    jj_consume_token(LLAVE_C);
    sim.lugar = nuevaTemp();
    sim.codigo = t.image + t1.image + sim1.codigo + s1 + '{' + sim2.codigo + sim3.codigo + '}';
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo const_explic() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      sim = argumentos();
      jj_consume_token(PYC);
    sim.codigo += "this" + sim.codigo + ';';
    {if (true) return sim;}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      sim = argumentos();
      jj_consume_token(PYC);
    sim.codigo += "super" + sim.codigo + ';';
    {if (true) return sim;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo inicializador_static() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(STATIC);
    sim = bloque();
    sim.codigo += "static" + sim.codigo;
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_9(2147483647)) {
      sim = asignacion();
                       {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        sim = expresion_cond();
                           {if (true) return sim;}
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo asignacion() throws ParseException {
 /*@bgen(jjtree) #asignacion( 2) */
  Nodoasignacion jjtn000 = new Nodoasignacion(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String t = "";
  String aux = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      sim1 = expresion_primaria();
      t = operador_asignacion();
      sim2 = expresion();
    jjtree.closeNodeScope(jjtn000,  2);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = sim1.lugar;
    sim.codigo = sim1.codigo;
  if (t == "=")
    {
      if (sim2.comienzo == "post"){
        sim.codigo += sim2.codigo;
        sim.codigo += sim.lugar + ":=" + sim2.lugar + "\u005cn";
            sim.codigo += sim2.verdadera;
      }
          else{
            sim.codigo += sim2.codigo;
            sim.codigo += sim.lugar + ":=" + sim2.lugar + "\u005cn";
      }
    }
    else
    {
      if (sim2.comienzo == "post")
      {
                aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\u005cn";
                sim.codigo += sim1.lugar + ":=" + aux + "\u005cn";
            sim.codigo += sim2.verdadera;
      }
      else
      {
        aux = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += aux + ":=" + sim1.lugar + t + sim2.lugar + "\u005cn";
        sim.codigo += sim1.lugar + ":=" + aux + "\u005cn";
      }
    }
    {if (true) return sim;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000,  2);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String operador_asignacion() throws ParseException {
  Token t = null;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      t = jj_consume_token(EQUALS);
                 {if (true) return "=";}
      break;
    case MULT_E:
      t = jj_consume_token(MULT_E);
                 {if (true) return "*";}
      break;
    case DIV_E:
      t = jj_consume_token(DIV_E);
                {if (true) return "/";}
      break;
    case MOD_E:
      t = jj_consume_token(MOD_E);
                {if (true) return "%";}
      break;
    case ADD_E:
      t = jj_consume_token(ADD_E);
                {if (true) return "+";}
      break;
    case SUB_E:
      t = jj_consume_token(SUB_E);
                {if (true) return "-";}
      break;
    case AND_E:
      t = jj_consume_token(AND_E);
                {if (true) return "&";}
      break;
    case OR_E:
      t = jj_consume_token(OR_E);
               {if (true) return "|";}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_cond() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_cond_or();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREG:
      jj_consume_token(PREG);
      sim1 = expresion();
      jj_consume_token(PYP);
      sim2 = expresion_cond();
    sim.codigo+= sim1.codigo + sim2.codigo;
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_cond_or() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_cond_and();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_19;
      }
      t = jj_consume_token(OR);
      NodoOr jjtn001 = new NodoOr(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        sim1 = expresion_cond_and();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.comienzo = nuevoIf();
      sim.falsa = elseIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 1" + ") goto " + sim.comienzo + "\u005cn";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\u005cn";
      sim.codigo += sim.comienzo + ":\u005cn" + sim.lugar + ":=1\u005cn";
      sim.codigo += "goto " + sim.siguiente + "\u005cn";
      sim.codigo += sim.falsa + ":\u005cn" + sim.lugar + ":=0\u005cn";
      sim.codigo += sim.siguiente + ":\u005cn";
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_cond_and() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_or_bin();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_20;
      }
      t = jj_consume_token(AND);
      NodoAnd jjtn001 = new NodoAnd(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        sim1 = expresion_or_bin();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.falsa = elseIf();
      sim.comienzo = nuevoIf();
      sim.siguiente = finIf();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + aux + " = 0" + ") goto " + sim.falsa + "\u005cn";
      sim.codigo += "if (" + sim1.lugar + " = 0" + ") goto " + sim.falsa + "\u005cn";
      sim.codigo += sim.lugar + ":=1\u005cn";
      sim.codigo += "goto " + sim.siguiente + "\u005cn";
      sim.codigo += sim.falsa + ":\u005cn" + sim.lugar + ":=0\u005cn";
      sim.codigo += sim.siguiente + ":\u005cn";
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_or_bin() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_xor();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_B:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_21;
      }
      t = jj_consume_token(OR_B);
      NodoBOr jjtn001 = new NodoBOr(JJTBOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        sim1 = expresion_xor();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_xor() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_and_bin();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_22;
      }
      t = jj_consume_token(XOR);
      NodoXOr jjtn001 = new NodoXOr(JJTXOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        sim1 = expresion_and_bin();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_and_bin() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_equal();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_B:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_23;
      }
      t = jj_consume_token(AND_B);
      NodoBAnd jjtn001 = new NodoBAnd(JJTBAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        sim1 = expresion_equal();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      aux = sim.lugar;
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_equal() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_instanceof();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL_IGUAL:
      case N_IGUAL:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL_IGUAL:
        t = jj_consume_token(IGUAL_IGUAL);
        NodoIgualIgual jjtn001 = new NodoIgualIgual(JJTIGUALIGUAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_instanceof();
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtn001.jjtSetLastToken(getToken(0));
        }
        }
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += "if (" + s + "=" + sim1.lugar + ") goto " + s1 + "\u005cn";
        sim.codigo += sim.lugar + ":=0\u005cn";
        sim.codigo += "goto " + s2 + "\u005cn";
        sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
        sim.codigo += s2 + ":\u005cn";
        break;
      case N_IGUAL:
        t = jj_consume_token(N_IGUAL);
      NodoNIgual jjtn002 = new NodoNIgual(JJTNIGUAL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_instanceof();
        } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtn002.jjtSetLastToken(getToken(0));
      }
        }
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + "!=" + sim1.lugar + ") goto " + s1 + "\u005cn";
      sim.codigo += sim.lugar + ":=0\u005cn";
      sim.codigo += "goto " + s2 + "\u005cn";
      sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
      sim.codigo += s2 + ":\u005cn";
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_instanceof() throws ParseException {
  Simbolo sim = new Simbolo();
  Token t = new Token();
  Token t1 = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_relacional();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
                                                    Nodoexpresion_instanceof jjtn001 = new Nodoexpresion_instanceof(JJTEXPRESION_INSTANCEOF);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        t1 = tipo();
      } catch (Throwable jjte001) {
                                                    if (jjtc001) {
                                                      jjtree.clearNodeScope(jjtn001);
                                                      jjtc001 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte001 instanceof RuntimeException) {
                                                      {if (true) throw (RuntimeException)jjte001;}
                                                    }
                                                    if (jjte001 instanceof ParseException) {
                                                      {if (true) throw (ParseException)jjte001;}
                                                    }
                                                    {if (true) throw (Error)jjte001;}
      } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                    }
      }
      sim.codigo += t.image + t1.image;
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_relacional() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s = "";
  String s1 = "";
  String s2 = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_shift();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
      case MAYOR:
      case MENOR_EQ:
      case MAYOR_EQ:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        t = jj_consume_token(MENOR);
                    NodoMenor jjtn001 = new NodoMenor(JJTMENOR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_shift();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
        }
        s = sim.lugar;
        s1 = nuevaEtiq();
        s2 = nuevaEtiq();
        sim.lugar = nuevaTemp();
        sim.codigo += sim2.codigo;
        sim.codigo += "if (" + s + "<" + sim1.lugar + ") goto " + s1 + "\u005cn";
        sim.codigo += sim.lugar + ":=0\u005cn";
        sim.codigo += "goto " + s2 + "\u005cn";
        sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
        sim.codigo += s2 + ":\u005cn";
        break;
      case MAYOR:
        t = jj_consume_token(MAYOR);
                  NodoMayor jjtn002 = new NodoMayor(JJTMAYOR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_shift();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo += sim1.codigo;
      sim.codigo += "if (" + s + ">" + sim1.lugar + ") goto " + s1 + "\u005cn";
      sim.codigo += sim.lugar + ":=0\u005cn";
      sim.codigo += "goto " + s2 + "\u005cn";
      sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
      sim.codigo += s2 + ":\u005cn";
        break;
      case MENOR_EQ:
        t = jj_consume_token(MENOR_EQ);
                     NodoMenorEq jjtn003 = new NodoMenorEq(JJTMENOREQ);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                     jjtn003.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_shift();
        } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte003;}
                     }
                     if (jjte003 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte003;}
                     }
                     {if (true) throw (Error)jjte003;}
        } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                       jjtn003.jjtSetLastToken(getToken(0));
                     }
        }
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + "<=" + sim1.lugar + ") goto " + s1 + "\u005cn";
      sim.codigo += sim.lugar + ":=0\u005cn";
      sim.codigo += "goto " + s2 + "\u005cn";
      sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
      sim.codigo += s2 + ":\u005cn";
        break;
      case MAYOR_EQ:
        t = jj_consume_token(MAYOR_EQ);
                     NodoMayorEq jjtn004 = new NodoMayorEq(JJTMAYOREQ);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                     jjtn004.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_shift();
        } catch (Throwable jjte004) {
                     if (jjtc004) {
                       jjtree.clearNodeScope(jjtn004);
                       jjtc004 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte004 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte004;}
                     }
                     if (jjte004 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte004;}
                     }
                     {if (true) throw (Error)jjte004;}
        } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  2);
                       jjtn004.jjtSetLastToken(getToken(0));
                     }
        }
      s = sim.lugar;
      s1 = nuevaEtiq();
      s2 = nuevaEtiq();
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += "if (" + s + ">=" + sim1.lugar + ") goto " + s1 + "\u005cn";
      sim.codigo += sim.lugar + ":=0\u005cn";
      sim.codigo += "goto " + s2 + "\u005cn";
      sim.codigo += s1 + ":\u005cn" + sim.lugar + ":=1\u005cn";
      sim.codigo += s2 + ":\u005cn";
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_shift() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_add();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESP_D:
      case DESP_I:
      case DESP_DNS:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESP_I:
        t = jj_consume_token(DESP_I);
                     NodoDespI jjtn001 = new NodoDespI(JJTDESPI);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_add();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      case DESP_D:
        t = jj_consume_token(DESP_D);
                     NodoDespD jjtn002 = new NodoDespD(JJTDESPD);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_add();
        } catch (Throwable jjte002) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte002 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte002;}
                     }
                     if (jjte002 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte002;}
                     }
                     {if (true) throw (Error)jjte002;}
        } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      case DESP_DNS:
        t = jj_consume_token(DESP_DNS);
                       NodoDespDNS jjtn003 = new NodoDespDNS(JJTDESPDNS);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                       jjtn003.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_add();
        } catch (Throwable jjte003) {
                       if (jjtc003) {
                         jjtree.clearNodeScope(jjtn003);
                         jjtc003 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte003 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte003;}
                       }
                       if (jjte003 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte003;}
                       }
                       {if (true) throw (Error)jjte003;}
        } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003,  2);
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_add() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_mult();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        t = jj_consume_token(ADD);
                                         NodoAdd jjtn001 = new NodoAdd(JJTADD);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_mult();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtn001.jjtSetLastToken(getToken(0));
                                         }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      case SUB:
        t = jj_consume_token(SUB);
                  NodoSub jjtn002 = new NodoSub(JJTSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_mult();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
          aux = sim.lugar;
          sim.lugar = nuevaTemp();
          sim.codigo += sim1.codigo;
          sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_mult() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_unaria();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        t = jj_consume_token(MULT);
                   NodoMult jjtn001 = new NodoMult(JJTMULT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      case DIV:
        t = jj_consume_token(DIV);
                  NodoDiv jjtn002 = new NodoDiv(JJTDIV);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      case MOD:
        t = jj_consume_token(MOD);
                  NodoMod jjtn003 = new NodoMod(JJTMOD);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtn003.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
        } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
        }
        aux = sim.lugar;
        sim.lugar = nuevaTemp();
        sim.codigo += sim1.codigo;
        sim.codigo += sim.lugar + ":=" + aux + t.image + sim1.lugar + "\u005cn";
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_unaria() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        t = jj_consume_token(ADD);
                  NodoUnaryAdd jjtn001 = new NodoUnaryAdd(JJTUNARYADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim = expresion_unaria();
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
        }
        {if (true) return sim;}
        break;
      case SUB:
        t = jj_consume_token(SUB);
                  NodoUnarySub jjtn002 = new NodoUnarySub(JJTUNARYSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
        sim.lugar = nuevaTemp();
        sim.codigo = sim1.codigo;
        sim.codigo += "-" + sim1.lugar + "\u005cn";
        {if (true) return sim;}
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PLUS_PLUS:
      sim = expresion_pre_inc();
                              {if (true) return sim;}
      break;
    case SUB_SUB:
      sim = expresion_pre_dec();
                              {if (true) return sim;}
      break;
    case NEW:
    case SUPER:
    case THIS:
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
    case PAR_A:
    case NOT:
    case COMP:
    case IDENTIFICADOR:
      sim = expresion_unaria_dif();
                                 {if (true) return sim;}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_pre_inc() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    t = jj_consume_token(PLUS_PLUS);
                    NodoPlusPlus jjtn001 = new NodoPlusPlus(JJTPLUSPLUS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
    try {
      sim = expresion_primaria();
    } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
    } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
    }
    sim.codigo += sim.lugar + ":=" + "++" + "\u005cn";
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_pre_dec() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    t = jj_consume_token(SUB_SUB);
                  NodoSubSub jjtn001 = new NodoSubSub(JJTSUBSUB);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
    try {
      sim = expresion_primaria();
    } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
    }
    sim.codigo += sim.lugar + ":=" + "--" + "\u005cn";
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_unaria_dif() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case COMP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMP:
        t = jj_consume_token(COMP);
                   NodoComp jjtn001 = new NodoComp(JJTCOMP);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
        sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ~" + sim1.lugar + "\u005cn";
      {if (true) return sim;}
        break;
      case NOT:
        t = jj_consume_token(NOT);
                  NodoNot jjtn002 = new NodoNot(JJTNOT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
        try {
          sim1 = expresion_unaria();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
        }
      sim.lugar = nuevaTemp();
      sim.codigo = sim1.codigo;
      sim.codigo += sim.lugar + ":= ! " + sim1.lugar + "\u005cn";
        {if (true) return sim;}
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_10(2147483647)) {
        sim = expresion_cast();
                           {if (true) return sim;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case SUPER:
        case THIS:
        case LITERAL_INTEGER:
        case LITERAL_FLOAT:
        case LITERAL_CARACTER:
        case LITERAL_STRING:
        case LITERAL_BOOLEAN:
        case LITERAL_NULL:
        case PAR_A:
        case IDENTIFICADOR:
          sim = expresion_post();
                           {if (true) return sim;}
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String look_cast() throws ParseException {
  String s, s1;
  Token t = new Token();
  Token t1 = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_11(2)) {
      jj_consume_token(PAR_A);
      t = tipo_primitivo();
                              {if (true) return '(' + t.image;}
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(PAR_A);
      t = identificador();
      jj_consume_token(COR_A);
      jj_consume_token(COR_C);
                                             {if (true) return '(' + t.image + '[' + ']';}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
        jj_consume_token(PAR_A);
        t = identificador();
        jj_consume_token(PAR_C);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMP:
          jj_consume_token(COMP);
            {if (true) return '(' + t.image + ')' + '~';}
          break;
        case NOT:
          jj_consume_token(NOT);
             {if (true) return '(' + t.image + ')' + "not" ;}
          break;
        case PAR_A:
          jj_consume_token(PAR_A);
               {if (true) return '(' + t.image + ')' + '(';}
          break;
        case IDENTIFICADOR:
          t1 = jj_consume_token(IDENTIFICADOR);
                          {if (true) return '(' + t.image + ')' + t1.image;}
          break;
        case THIS:
          jj_consume_token(THIS);
              {if (true) return '(' + t.image + ')' + "this";}
          break;
        case SUPER:
          jj_consume_token(SUPER);
               {if (true) return '(' + t.image + ')' + "super";}
          break;
        case NEW:
          jj_consume_token(NEW);
             {if (true) return '(' + t.image + ')' + "new";}
          break;
        case LITERAL_INTEGER:
        case LITERAL_FLOAT:
        case LITERAL_CARACTER:
        case LITERAL_STRING:
        case LITERAL_BOOLEAN:
        case LITERAL_NULL:
          s1 = literal();
                    {if (true) return '(' + t.image + ')' + s1;}
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_post() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  String aux = "";
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_primaria();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_PLUS:
    case SUB_SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        t = jj_consume_token(PLUS_PLUS);
                   s = t.image;
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "++" + "\u005cn";
        break;
      case SUB_SUB:
        t = jj_consume_token(SUB_SUB);
                 s = t.image;
      sim.comienzo = "post";
      sim.verdadera += sim.lugar + ":=" + "--" + "\u005cn";
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    //sim.codigo += sim.verdadera; 
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_cast() throws ParseException {
  String s = "";
  String s2 = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_13(2)) {
      jj_consume_token(PAR_A);
      t = tipo_primitivo();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_29;
        }
        jj_consume_token(COR_A);
        jj_consume_token(COR_C);
                                                s2 += '[' + ']';
      }
      jj_consume_token(PAR_C);
      sim1 = expresion_unaria();
      sim.lugar = nuevaTemp();
      sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
      {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
        jj_consume_token(PAR_A);
        t = identificador();
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COR_A:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_30;
          }
          jj_consume_token(COR_A);
          jj_consume_token(COR_C);
                                               s2 += '[' + ']';
        }
        jj_consume_token(PAR_C);
        sim1 = expresion_unaria_dif();
        sim.lugar = nuevaTemp();
        sim.codigo = '(' + t.image + s2 + ')' + sim1.codigo;
        {if (true) return sim;}
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_primaria() throws ParseException {
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim = new Simbolo();
  String aux = "";
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim1 = prefijo_primario();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAR_A:
      case COR_A:
      case PUNTO:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_31;
      }
      sim2 = sufijo_primario();
      if (sim2.verdadera.equals("argumentos"))
      {
        sim1.lugar = sim1.verdadera;
        sim1.verdadera = "";
        sim2.codigo +="call " + sim1.lugar + ", " + sim2.comienzo + "\u005cn";
      }
      else
      {
                s += sim2.lugar;
                s1 += sim2.codigo;
                sim2.lugar = s;
                sim2.codigo = s1;
      }
    }
    sim.lugar = sim1.lugar + sim2.lugar;
    sim.codigo = sim1.codigo + sim2.codigo;
    //System.out.println("EXPRESION_PRIMARIA\t" + sim.codigo);
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo prefijo_primario() throws ParseException {
  Simbolo sim = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
      s = literal();
    sim.lugar = nuevaTemp();
    sim.codigo = sim.lugar + ":=" + s + "\u005cn";
    {if (true) return sim;}
      break;
    case IDENTIFICADOR:
      t = identificador();
        if (gestorTSIntermedia.estaLexema(t.image))
                sim.lugar = gestorTSIntermedia.getAtributos(t.image).getAlias();
        else
                sim.lugar = t.image;
    sim.verdadera = t.image;
    sim.codigo = "";
    {if (true) return sim;}
      break;
    case THIS:
      t = jj_consume_token(THIS);
    s = t.image;
    //TODO
    {if (true) return sim;}
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(PUNTO);
      t = jj_consume_token(IDENTIFICADOR);
    //TODO
    {if (true) return sim;}
      break;
    case PAR_A:
      jj_consume_token(PAR_A);
      sim = expresion();
      jj_consume_token(PAR_C);
                                      {if (true) return sim;}
      break;
    case NEW:
      sim = expresion_asignacion_array();
                                       {if (true) return sim;}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sufijo_primario() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COR_A:
      jj_consume_token(COR_A);
      sim1 = expresion();
      jj_consume_token(COR_C);
    sim.lugar = "[" + sim1.lugar+ "]";
    sim.codigo = sim1.codigo;
    {if (true) return sim;}
      break;
    case PUNTO:
      jj_consume_token(PUNTO);
      t = jj_consume_token(IDENTIFICADOR);
    sim.lugar = "." + t.image;
    {if (true) return sim;}
      break;
    case PAR_A:
      sim = argumentos();
                       {if (true) return sim;}
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo argumentos() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PAR_A);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case SUPER:
    case THIS:
    case LITERAL_INTEGER:
    case LITERAL_FLOAT:
    case LITERAL_CARACTER:
    case LITERAL_STRING:
    case LITERAL_BOOLEAN:
    case LITERAL_NULL:
    case PAR_A:
    case ADD:
    case SUB:
    case PLUS_PLUS:
    case SUB_SUB:
    case NOT:
    case COMP:
    case IDENTIFICADOR:
      sim = lista_argumentos();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(PAR_C);
                                                 {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo lista_argumentos() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  String s;
  int numeroarg = 0;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim1 = expresion();
    sim.codigo = sim1.codigo;
    s = "param " + sim1.lugar + "\u005cn";
    numeroarg++;
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMA);
      sim2 = expresion();
    sim.codigo += sim2.codigo;
    s += "param " + sim2.lugar + "\u005cn";
    numeroarg++;
    }
    sim.verdadera = "argumentos"; //FIXME es una cutrada
    sim.comienzo = "" + numeroarg;
    sim.codigo += s;
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_asignacion_array() throws ParseException {
 /*@bgen(jjtree) expresion_asignacion_array */
  Nodoexpresion_asignacion_array jjtn000 = new Nodoexpresion_asignacion_array(JJTEXPRESION_ASIGNACION_ARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Token t = new Token();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      if (jj_2_14(2)) {
        jj_consume_token(NEW);
        t = tipo_primitivo();
        sim1 = dimensiones_array();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = "new";
    {if (true) return sim;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          t = identificador();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PAR_A:
            sim1 = argumentos();
            break;
          case COR_A:
            sim1 = dimensiones_array();
            break;
          default:
            jj_la1[80] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = "new";
    {if (true) return sim;}
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo dimensiones_array() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    label_33:
    while (true) {
      jj_consume_token(COR_A);
      sim1 = expresion();
      jj_consume_token(COR_C);
      sim.codigo = sim1.codigo;
      sim.codigo += '[' + sim1.lugar + ']';
      if (jj_2_15(2)) {
        ;
      } else {
        break label_33;
      }
    }
    label_34:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_34;
      }
      jj_consume_token(COR_A);
      jj_consume_token(COR_C);
      sim.codigo += '[' + ']';
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_17(2)) {
      sim = sentencia_etiqueta();
                               {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVE_A:
        sim = bloque();
                   {if (true) return sim;}
        break;
      case PYC:
        sim = sentencia_vacia();
                            {if (true) return sim;}
        break;
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sim = expresion_sentencia();
        jj_consume_token(PYC);
                                      sim.codigo += sim.verdadera; {if (true) return sim;}
        break;
      case SWITCH:
        sim = sentencia_switch();
                             {if (true) return sim;}
        break;
      case IF:
        sim = sentencia_if();
                         {if (true) return sim;}
        break;
      case WHILE:
        sim = sentencia_while();
                            {if (true) return sim;}
        break;
      case DO:
        sim = sentencia_do();
                         {if (true) return sim;}
        break;
      case FOR:
        sim = sentencia_for();
                          {if (true) return sim;}
        break;
      case BREAK:
        sim = sentencia_break();
                            {if (true) return sim;}
        break;
      case CONTINUE:
        sim = sentencia_continue();
                               {if (true) return sim;}
        break;
      case RETURN:
        sim = sentencia_return();
                             {if (true) return sim;}
        break;
      case THROW:
        sim = sentencia_throw();
                            {if (true) return sim;}
        break;
      case SYNCHRONIZED:
        sim = sentencia_synchronized();
                                   {if (true) return sim;}
        break;
      case TRY:
        sim = sentencia_try();
                          {if (true) return sim;}
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_etiqueta() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PYP);
    sim1 = sentencia();
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo bloque() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(LLAVE_A);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_35;
      }
      sim1 = sentencia_bloque();
                                        sim.codigo += sim1.codigo;
    }
    jj_consume_token(LLAVE_C);
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_bloque() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_18(2147483647)) {
      sim = declaracion_variable_local();
      jj_consume_token(PYC);
                                             {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case RETURN:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRY:
      case WHILE:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case LLAVE_A:
      case PYC:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sim = sentencia();
                      {if (true) return sim;}
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo declaracion_variable_local() throws ParseException {
 /*@bgen(jjtree) declaracion_variable_local */
  Nododeclaracion_variable_local jjtn000 = new Nododeclaracion_variable_local(JJTDECLARACION_VARIABLE_LOCAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  String s = "";
  Token t = new Token();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      t = tipo();
      sim = declarador_variable();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_36;
        }
        jj_consume_token(COMA);
        sim1 = declarador_variable();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_vacia() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    jj_consume_token(PYC);
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo expresion_sentencia() throws ParseException {
 /*@bgen(jjtree) expresion_sentencia */
  Nodoexpresion_sentencia jjtn000 = new Nodoexpresion_sentencia(JJTEXPRESION_SENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_PLUS:
        sim = expresion_pre_inc();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                              {if (true) return sim;}
        break;
      case SUB_SUB:
        sim = expresion_pre_dec();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                              {if (true) return sim;}
        break;
      default:
        jj_la1[86] = jj_gen;
        if (jj_2_19(2147483647)) {
          sim = asignacion();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sim;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case SUPER:
          case THIS:
          case LITERAL_INTEGER:
          case LITERAL_FLOAT:
          case LITERAL_CARACTER:
          case LITERAL_STRING:
          case LITERAL_BOOLEAN:
          case LITERAL_NULL:
          case PAR_A:
          case IDENTIFICADOR:
            sim = expresion_post();
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                           {if (true) return sim;}
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_switch() throws ParseException {
 /*@bgen(jjtree) sentencia_switch */
  Nodosentencia_switch jjtn000 = new Nodosentencia_switch(JJTSENTENCIA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  String s1 = "";
  String s2 = "";
  String etiqCase = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(PAR_A);
      sim3 = expresion();
      jj_consume_token(PAR_C);
      jj_consume_token(LLAVE_A);
    sim.comienzo = nuevoIf();
    sim.siguiente = finIf();
    etiqCase = nuevoCase(); //hacer
    sim.codigo = sim.comienzo + ":\u005cn";
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULT_PLG:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_37;
        }
        sim1 = etiqueta_switch();
        sim4 = new Simbolo();
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BREAK:
          case CHAR:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRY:
          case WHILE:
          case LITERAL_INTEGER:
          case LITERAL_FLOAT:
          case LITERAL_CARACTER:
          case LITERAL_STRING:
          case LITERAL_BOOLEAN:
          case LITERAL_NULL:
          case PAR_A:
          case LLAVE_A:
          case PYC:
          case PLUS_PLUS:
          case SUB_SUB:
          case IDENTIFICADOR:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_38;
          }
          sim2 = sentencia_bloque();
            sim4.codigo += sim2.codigo;
        }
            if (sim1.lugar != "default")
              {
                s1 = nuevaEtiq();
                s2 = nuevaEtiq();
                sim.codigo += sim1.codigo;
                sim.codigo += "if (" + sim3.lugar + "=" + sim1.lugar + ") goto " + s1 + "\u005cn";
                sim.codigo += sim1.lugar + ":=0\u005cn";
                sim.codigo += "goto " + s2 + "\u005cn";
                sim.codigo += s1 + ":\u005cn" + sim1.lugar + ":=1\u005cn";
                sim.codigo += s2 + ":\u005cnif (" + sim1.lugar + "=0) goto " + etiqCase + "\u005cn";
                sim.codigo += sim4.codigo;

                if (sim2.lugar == "break")
                  sim.codigo += "goto " + sim.siguiente +"\u005cn";

                sim.codigo += etiqCase + ":\u005cn";
                etiqCase = nuevoCase();
              }
            else
              { sim.codigo += sim4.codigo; }
      }
     sim.codigo += sim.siguiente + ":\u005cn";
      jj_consume_token(LLAVE_C);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    gestorTSIntermedia.cierraAmbito();
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo etiqueta_switch() throws ParseException {
 /*@bgen(jjtree) etiqueta_switch */
  Nodoetiqueta_switch jjtn000 = new Nodoetiqueta_switch(JJTETIQUETA_SWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        sim = expresion();
        jj_consume_token(PYP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sim;}
        break;
      case DEFAULT_PLG:
        jj_consume_token(DEFAULT_PLG);
        jj_consume_token(PYP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = "default";
    {if (true) return sim;}
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_if() throws ParseException {
 /*@bgen(jjtree) sentencia_if */
  Nodosentencia_if jjtn000 = new Nodosentencia_if(JJTSENTENCIA_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Boolean hayelse = false;
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(IF);
      jj_consume_token(PAR_A);
      sim1 = expresion();
      jj_consume_token(PAR_C);
      sim2 = sentencia();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        sim3 = sentencia();
                                             hayelse = true;
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.comienzo = nuevoIf();
    if (hayelse) sim.falsa = elseIf();
    sim.siguiente = finIf();
    sim.codigo = sim1.codigo;
    if (hayelse)
      {
        sim.codigo += "goto " + sim.comienzo + "\u005cn";
        sim.codigo += sim.comienzo + ":\u005cn";
        sim.codigo += "if (" + sim1.lugar + "=0) goto " + sim.falsa + "\u005cn";
        sim.codigo += sim2.codigo;
        sim.codigo += "goto " + sim.siguiente + "\u005cn";
        sim.codigo += sim.falsa + ":\u005cn";
        sim.codigo += sim3.codigo;
        sim.codigo += sim.siguiente + ":\u005cn";
      }
    else
      {
        //System.out.println("IF\t" + sim2.codigo);
        sim.codigo += "goto " + sim.comienzo + "\u005cn";
        sim.codigo += sim.comienzo + ":\u005cn" + "if (" + sim1.lugar + "=0) goto " + sim.siguiente + "\u005cn";
        sim.codigo += sim2.codigo;
        sim.codigo += sim.siguiente + ": \u005cn";
      }

        gestorTSIntermedia.cierraAmbito();

    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_while() throws ParseException {
 /*@bgen(jjtree) sentencia_while */
  Nodosentencia_while jjtn000 = new Nodosentencia_while(JJTSENTENCIA_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PAR_A);
      sim1 = expresion();
      jj_consume_token(PAR_C);
      sim2 = sentencia();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\u005cn";
    sim.codigo += sim1.codigo;
    sim.codigo += "if (" + sim1.lugar + "=" + 0 + ") goto " + sim.siguiente + "\u005cn";
    sim.codigo += sim2.codigo;
    sim.codigo += "goto " + sim.comienzo + "\u005cn";
    sim.codigo += sim.siguiente + ":\u005cn";

        gestorTSIntermedia.cierraAmbito();

    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_do() throws ParseException {
 /*@bgen(jjtree) sentencia_do */
  Nodosentencia_do jjtn000 = new Nodosentencia_do(JJTSENTENCIA_DO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(DO);
      sim1 = sentencia();
      jj_consume_token(WHILE);
      jj_consume_token(PAR_A);
      sim2 = expresion();
      jj_consume_token(PAR_C);
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim.comienzo + ":\u005cn";
    sim.codigo += sim1.codigo;
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\u005cn";
    sim.codigo += "goto " + sim.comienzo + "\u005cn";
    sim.codigo += sim.siguiente + ":\u005cn";

    gestorTSIntermedia.cierraAmbito();
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_for() throws ParseException {
 /*@bgen(jjtree) sentencia_for */
  Nodosentencia_for jjtn000 = new Nodosentencia_for(JJTSENTENCIA_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(FOR);
      jj_consume_token(PAR_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case SHORT:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sim1 = inicio_for();
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        sim2 = expresion();
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sim3 = actualizar_for();
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(PAR_C);
      sim4 = sentencia();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.comienzo = nuevoBucle();
    sim.siguiente = finBucle();
    sim.codigo = sim1.codigo;
    sim.codigo += sim.comienzo + ":\u005cn";
    sim.codigo += sim2.codigo;
    sim.codigo += "if (" + sim2.lugar + "=" + 0 + ") goto " + sim.siguiente + "\u005cn";
    sim.codigo += sim4.codigo;
    sim.codigo += sim3.codigo;
    sim.codigo += "goto " + sim.comienzo + "\u005cn";
    sim.codigo += sim.siguiente + ":\u005cn";
    gestorTSIntermedia.cierraAmbito();
  {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo lista_expresion_sentencia() throws ParseException {
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = expresion_sentencia();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_39;
      }
      jj_consume_token(COMA);
      sim2 = expresion_sentencia();
    }
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo inicio_for() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    if (jj_2_20(2147483647)) {
      sim = declaracion_variable_local();
    {if (true) return sim;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case PLUS_PLUS:
      case SUB_SUB:
      case IDENTIFICADOR:
        sim = lista_expresion_sentencia();
    {if (true) return sim;}
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo actualizar_for() throws ParseException {
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    sim = lista_expresion_sentencia();
    {if (true) return sim;}
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_break() throws ParseException {
 /*@bgen(jjtree) sentencia_break */
  Nodosentencia_break jjtn000 = new Nodosentencia_break(JJTSENTENCIA_BREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s = "";
  Token t = new Token();
  Simbolo sim = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        t = jj_consume_token(IDENTIFICADOR);
                               s = t.image;
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.lugar = "break";
    {if (true) return sim;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_continue() throws ParseException {
 /*@bgen(jjtree) sentencia_continue */
  Nodosentencia_continue jjtn000 = new Nodosentencia_continue(JJTSENTENCIA_CONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t = new Token();
  Simbolo sim = new Simbolo();
  String s = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        t = jj_consume_token(IDENTIFICADOR);
                                  s = t.image;
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.codigo = "continue" + s + ';';
    {if (true) return sim;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_return() throws ParseException {
 /*@bgen(jjtree) sentencia_return */
  Nodosentencia_return jjtn000 = new Nodosentencia_return(JJTSENTENCIA_RETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s = "";
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case SUPER:
      case THIS:
      case LITERAL_INTEGER:
      case LITERAL_FLOAT:
      case LITERAL_CARACTER:
      case LITERAL_STRING:
      case LITERAL_BOOLEAN:
      case LITERAL_NULL:
      case PAR_A:
      case ADD:
      case SUB:
      case PLUS_PLUS:
      case SUB_SUB:
      case NOT:
      case COMP:
      case IDENTIFICADOR:
        sim1 = expresion();
                                  s = sim1.codigo;
        break;
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.codigo = sim1.codigo;
    sim.codigo += "&return " + sim1.lugar + "\u005cn";
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_throw() throws ParseException {
 /*@bgen(jjtree) sentencia_throw */
  Nodosentencia_throw jjtn000 = new Nodosentencia_throw(JJTSENTENCIA_THROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(THROW);
      sim1 = expresion();
      jj_consume_token(PYC);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.codigo = "throw" + sim1.codigo + ';';
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_synchronized() throws ParseException {
 /*@bgen(jjtree) sentencia_synchronized */
  Nodosentencia_synchronized jjtn000 = new Nodosentencia_synchronized(JJTSENTENCIA_SYNCHRONIZED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(PAR_A);
      sim1 = expresion();
      jj_consume_token(PAR_C);
      sim2 = bloque();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.codigo = "synchronized" + '(' + sim1.codigo + ')' + sim2.codigo;
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Simbolo sentencia_try() throws ParseException {
 /*@bgen(jjtree) sentencia_try */
  Nodosentencia_try jjtn000 = new Nodosentencia_try(JJTSENTENCIA_TRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));gestorTSIntermedia.nuevoAmbito("");
  Simbolo sim = new Simbolo();
  Simbolo sim1 = new Simbolo();
  Simbolo sim2 = new Simbolo();
  Simbolo sim3 = new Simbolo();
  Simbolo sim4 = new Simbolo();
  Simbolo sim5 = new Simbolo();
  String s = "";
  String s1 = "";
  if (usaInterfaz)
  {
    InterfazPlg.escribirAvisos();
  }
    try {
      jj_consume_token(TRY);
      sim1 = bloque();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_40;
        }
        jj_consume_token(CATCH);
        jj_consume_token(PAR_A);
        sim5 = parametro_formal();
        jj_consume_token(PAR_C);
        sim3 = bloque();
                                                                   s = "cath" + '(' + sim5.codigo + ')' + sim3.codigo;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        sim4 = bloque();
                               s1 = "finally" + sim4.codigo;
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sim.codigo = "try" + sim1.codigo + s + s1;
    gestorTSIntermedia.cierraAmbito();
    {if (true) return sim;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_3_20() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(PREG)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(PYP)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_51()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  static private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(OR_E)) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(AND_E)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(SUB_E)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(ADD_E)) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(MOD_E)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(DIV_E)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(MULT_E)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_57()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_150()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_3R_132()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(PAR_A)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(DESP_DNS)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(DESP_D)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(DESP_I)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_scan_token(MAYOR_EQ)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(MENOR_EQ)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(MAYOR)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(MENOR)) return true;
    if (jj_3R_144()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_151()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PAR_C)) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PAR_C)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(N_IGUAL)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_scan_token(IGUAL_IGUAL)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  static private boolean jj_3R_189() {
    if (jj_scan_token(SUB_SUB)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_188() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(LITERAL_NULL)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(AND_B)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(COR_A)) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(COMP)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(LITERAL_BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(PAR_C)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(LITERAL_STRING)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_54()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(LLAVE_A)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(LITERAL_CARACTER)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_3R_182()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(LITERAL_FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    if (jj_scan_token(COMP)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(LLAVE_A)) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  static private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(LITERAL_INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(OR_B)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PYP)) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_125()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_scan_token(SUB_SUB)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_124()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_3R_122()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(PUNTO)) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(PLUS_PLUS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_170()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_3R_169()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_3R_168()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[102];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x2020800,0x0,0x8411000,0x0,0x8411000,0x800,0x8411000,0x0,0x2000800,0x2000800,0x1000000,0x80000000,0xa411800,0xa411000,0x2000800,0x2000800,0x800,0x800,0x1000000,0xa411800,0xa411000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000800,0x2000800,0x0,0x0,0x0,0x0,0x8411000,0x0,0x0,0x0,0x58693000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50282000,0x58693000,0x50282000,0x0,0x0,0x0,0x104000,0x58693000,0x104000,0x800000,0x8411000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x1,0x0,0x208,0x1f800000,0x814,0x0,0x814,0x208,0x100814,0x0,0x200,0x200,0x0,0x0,0x309b94,0x201b94,0x9380,0x9380,0x200,0x200,0x0,0x309b94,0x201b94,0x201380,0x201380,0x0,0x0,0x0,0xbf812020,0x0,0xbf812020,0x9380,0x9380,0x40000,0x80000000,0x0,0x0,0x814,0x380,0x380,0x40000,0xbfcbec34,0x12000,0x3f812020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f812020,0x0,0x0,0x3f812020,0x3f812020,0x20000000,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x3f812020,0x20000000,0x3f812020,0x0,0x20000000,0x20,0xbfcbe420,0xbfcbec34,0xbfcbe420,0x0,0x0,0x3f812020,0x0,0xbfcbec34,0x0,0x0,0x3f812834,0x3f812020,0x3f812020,0x0,0x3f812020,0x0,0x0,0x3f812020,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x20,0x8,0x0,0x0,0x2,0x0,0x8,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x2,0x38c0000,0x10,0x38c0000,0x0,0x0,0x0,0x8,0x2,0x10,0x0,0x0,0x0,0x0,0x1800008,0x0,0x38c0000,0xfc000000,0x80,0x100,0x200,0x400,0x0,0x800,0x3000,0x3000,0x0,0x3c000,0x3c000,0x0,0x0,0xc0000,0xc0000,0x700000,0x700000,0xc0000,0x38c0000,0x2000000,0x2000000,0x0,0x2000000,0x0,0x1800000,0x1800000,0x2,0x2,0x0,0x22,0x0,0x22,0x38c0000,0x10,0x2,0x0,0x1800008,0x1800008,0x1800008,0x10,0x1800000,0x0,0x0,0x1800008,0x0,0x0,0x1800000,0x38c0000,0x1800000,0x10,0x1800000,0x0,0x0,0x38c0000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x2,0x0,0xc0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0xc0,0x3,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x1c,0x0,0x0,0x0,0x0,0x0,0xc0,0x40,0x40,0x80,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0xc0,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x80,0x0,0x80,0x0,0x0,0x80,0xc0,0x80,0x0,0x80,0x80,0x80,0xc0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[20];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[104];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 102; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 104; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 20; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
